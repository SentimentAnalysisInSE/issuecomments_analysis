[{
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.8
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "This causes a style guide violation and makes it harder to move towards onevar",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.8,
                "score": -0.8
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "positionPercentHack(elem, name, value) = positionPercentHack( elem, name, value )",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "pbkdf2() should throw if typeof callback !== function.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "You dont want your program to grind silently to a halt because you thought you were passing in a callback when in fact you werent.",
                    "beginOffset": 55
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Is null used as a hack?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Youd need to escape every regexp special characters (think .",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "for instance) in s.data so that you dont have false negative.",
                    "beginOffset": 61
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "Talk about a simple hack gone wrong in the convoluted department (not to mention performance and memory issues in older browsers",
                    "beginOffset": 123
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Actually I just discovered the null checks are needed.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "One of the hover unit tests fail if they are not there.",
                    "beginOffset": 56
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "I think because events triggered programatically (by trigger()) do not have a relatedTarget assigned.",
                    "beginOffset": 113
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Anyway, all I was trying to say was:  o",
                    "beginOffset": 216
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "node.createDocumentFragment && node could easily be misinterpreted as a code bug (it took me several minutes to figure out that its intent is to ensure node is assigned and not simply that operands got inadvertently swapped), Iâ€™m strongly inclined to",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "My point was that thereâ€™s no need for:  js var gaJsHost = ((https: == document.location.protocol) ?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "https://ssl.",
                    "beginOffset": 107
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": ": http://www.),   The schemerelative URL in g.src = //www.googleanalytics.com/ga.js, wouldnâ€˜t work correctly over HTTPS, eit",
                    "beginOffset": 120
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "You are correct  beforedeactivate only exists in IE.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "propertychange also only exists in IE.",
                    "beginOffset": 54
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Would you like me to remove the browser sniffing, and while Im at it, clean up the code as per JQuery_Core_Style_Guidelines, and rebase it (or whatever the co",
                    "beginOffset": 94
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Sure, CC.strip().split() would be fine.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Change it to that and I can merge.",
                    "beginOffset": 40
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Have you signed the CLA?",
                    "beginOffset": 75
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Should we restore whatever value was previously set?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Note: not the computed value, but the assigned value, element.style.webkitUserSelect.",
                    "beginOffset": 53
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Thats not right, X509_STORE_add_cert() takes ownership of the certificate.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Dont free pkey and cert here if PKCS12_parse() returned an error.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "That function allocates memory for the key and the certificate and updates the pointers in the argument list.",
                    "beginOffset": 66
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "On error, it frees the memory but doesnt set the pointers to NULL.",
                    "beginOffset": 176
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "You",
                    "beginOffset": 243
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Preferably use fPIC instead of mimpuretext.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "The latter is a linker hack that makes positiondependent code work in a shared object.",
                    "beginOffset": 44
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Should the signature be (d, i)?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yes, I removed it as I was thinking the signature root.add(d, i) might be confusing.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "I think itâ€™s fine though, so Iâ€™ll add it back everywhere. :)",
                    "beginOffset": 86
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Oops, I didnt mean to add i to the public signature, I was thinking more like this:  js root.add = function(d) {   insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_), },  i = 1, points.forEach(root.add), return root,",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 2.5,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Never mind, I cant send you a personal message  no email address with Github?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "I do actually but now that you mention it...",
                    "beginOffset": 79
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "I havent received a PM in ages.",
                    "beginOffset": 124
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "1.)",
                    "beginOffset": 158
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "We stick with the solution above.",
                    "beginOffset": 162
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "We document that setting the honorCipherOrder option",
                    "beginOffset": 196
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Well spotted.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "It wasnâ€™t actually necessary since .lineStart always reassigned it anyway, but itâ€™s cleaner and more efficient to only reassign on ringEnd.",
                    "beginOffset": 15
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Fixed in @623b594cf5d9e413da78e20cadbc00726521718e.",
                    "beginOffset": 170
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "workers are assigned to the cluster.worker by there uniqueID, this makes them very easy to find again.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "If we change this to an array people will get a lot of undefined values in there for loop.",
                    "beginOffset": 103
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Also i dont like to have method like .push() that indi",
                    "beginOffset": 194
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "When using autoFork workers will be assigned a workerID from 0 to cpus().length, and the reuse this when the respawning.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "you need the try/catch because decodeURIComponent will throw on some failures that the fallback can handle",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "FreeBSD cant distribute strong encryption code internationally (out of the US).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "I wonder if this is tied to that issue: http://www.freebsd.org/doc/en_US.ISO88591/books/handbook/crypt.html Or another more likely issue is that OpenSSL makes it clear in th",
                    "beginOffset": 80
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "pull a _why and make everything as cryptic as possible, thats what good programmers do.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "job security ftw",
                    "beginOffset": 88
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.8
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "again, another style violation for no gain.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.8,
                "score": -0.8
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Please keep the old signature and add a new one.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "We should probably set the default less strict.",
                    "beginOffset": 50
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Yes it is still possible, but note that both HttpPostRequestDecoder and HttpPostRequestEncoder have the HattpDataFactory as argument, which should be setup to use (or not use) this RFC conforming rule, since this is where (HttpDataFactory) this rule has t",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Instead of sniffing for IE, you can use the IEspecific [document.documentMode](http://msdn.microsoft.com/enus/library/ie/cc196988(v=vs.85).aspx) property.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "btw, one thing this doesnt deal with very well are certificates with many subjectAltNames....",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "hrm.",
                    "beginOffset": 94
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Btw, this still needs to be configured properly...",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "So at lines below we can use c.authorized property to test if SNI was successfull",
                    "beginOffset": 51
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This statement seems moderately misleading considering node.js does support client certificates?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "I understand what is trying to be stated, maybe it just needs a different wording about the most common use cases.",
                    "beginOffset": 98
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Speaking purely as a consumer of this API, not having a unified behavoir between PSK and certificates for the error handling of a failed to authenticate connection is kinda a bummer.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Is there a better way to unify them so the same code that checked autho",
                    "beginOffset": 184
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "The issue with doing that is that if the title changes, so do the url hashes.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "I reverted to using explicit named anchors to ensure the urls dont change when the title copy does.",
                    "beginOffset": 78
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "The toolbar was designed to be able to be rendered several times by avoiding using ids in it.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "It should be avoided here too",
                    "beginOffset": 94
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "All classes used in the styles of the toolbar should start with sf to avoid conflicting with the styles of the page.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "We dont control the page as this is injected into the app (the same is true for the name of the keyframes btw)",
                    "beginOffset": 117
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@stof the only way I can think of to prevent this is to keep the current signature and add a setter to be called after getLoader.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Im not completely happy with neither approach.",
                    "beginOffset": 130
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Any suggestions?",
                    "beginOffset": 177
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.8
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "This is wrong as the DependencyInjection parameter bag does not support deep parameters.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.8,
                "score": -0.8
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "But otherwise I would not comply with the signature of the parent class.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "What would you suggest?",
                    "beginOffset": 73
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Am 09.05.2013 um 15:03 schrieb Fabien Potencier \u003cnotifications@github.com:   In src/Symfony/Component/DependencyInjection/ParameterBag/FrozenParamete",
                    "beginOffset": 99
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "The parameter list does not seem to match the method signature.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "1.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "This should probably be moved out of the if to be set wether CSRF is enabled or not",
                    "beginOffset": 3
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Why not use [()](http://api.symfony.com/2.2/Symfony/Component/DependencyInjection/ContainerBuilder.html#method_findDefinition)?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Id say that if you start dispatching on the outer Dispatcher, that one is responsible for setting the name + inject itself into the Event.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Should one (of the Listeners, f. e.) try to dispatch the same Event object with another name again, well be in",
                    "beginOffset": 140
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "you should inject the logger service and let MonologBundle change it based on the tag.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "This way, it remains compatible with alternate logger implementations if someone decides to use something else than MonologBundle",
                    "beginOffset": 87
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "well, I do agree but someone might have hacked Symfony in a way that it would break with this change.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "So, not sure if its worth it.",
                    "beginOffset": 102
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "This one must be reverted as using md5 is part of the Digest scheme, so we cannot control what to use.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Yes, if this is also digest auth  that has to use the hash in the spec",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "this should be a HMAC, not just a hash",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "should be HMAC",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "HMAC",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": 0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 2,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "That would violate the **DRY** convention.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "That is how the encoder retrieves options at the moment, but only for a single value.",
                    "beginOffset": 43
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "I dont think it makes sense to repeat the same block three times if they are all going to do the same (getters/setters).",
                    "beginOffset": 129
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Should be: } catch (BadCredentialsException ) { to much CS.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Im not a big fan of the injection of the input here as it means that the helper becomes stateful.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "I know that because of BC, we dont have many choices, but another possibility would be to just inject the value of the interaction flag.",
                    "beginOffset": 98
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "It would still be",
                    "beginOffset": 235
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "What about injecting the Application and adding a getInput method to the application?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "This means that the application is statefull of the input, but it is already quite statefull of the current command (Application::).",
                    "beginOffset": 87
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "And it means",
                    "beginOffset": 220
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@fabpot  Is my fault I didnt think that would be BC (just updated the table to BC).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "But you dont like the idea of a method isEmpty() at all?",
                    "beginOffset": 84
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "If you like, there is a way of doing this without BC, a new interface ConstraintViolationListExtendedInterfac",
                    "beginOffset": 142
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "shouldnt salt be optional then ( = )",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "As far as I can tell it impossible to test as previously written.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "handleFatal gets its  from get_last_error and there is no way that I know of to inject this dependency from the outside.",
                    "beginOffset": 66
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "I added handleFatalError to split the code and allo",
                    "beginOffset": 188
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "In that case, I think that keeping the method private and changing its visibility in a test is a better option (you can do it with [reflection](http://php.net/manual/en/book.reflection.php)).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Id say its better to hack in a test (as you called it), rat",
                    "beginOffset": 192
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "You forget it return new Response(()), and return new Response(()), (whatever the contenttype here is)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Not really superhappy with this one  the dumper is probably not part of the compiler, but I dont really know how to set the correct proxy dumper in the SymfonyComponentDependencyInjectionDumperPhpDumper instance",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "More proper would be:  php if (self::) {     if (self::[self::HEADER_CLIENT_PORT] &&  = (self::[self::HEADER_CLIENT_PORT])) {                     return ,     }      if (",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "we are not using yaml_encode anymore in the profiler but json_encode instead.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "And to avoid blackslashes, you must use |json_encode(64 bor 256)",
                    "beginOffset": 78
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Adding the parameter in the middle of the signature is a BC break",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.6,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "ok, makes sense.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            },
            {
                "text": {
                    "content": "i only use the name in the line below, to replace in the driver name pattern, i dont need the actual manager service name.",
                    "beginOffset": 17
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "regarding the problem of default might not be named default, i would inject two parameters then?",
                    "beginOffset": 141
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "the paramete",
                    "beginOffset": 238
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Maybe, it would be better to document that InlineFragmentRenderer acts like a proxy and user have to add 127.0.0.1 to the list of trusted proxies if he wants to get the real client IP for this subrequest?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "BTW, since 2.3 you cant trust proxies and ha",
                    "beginOffset": 205
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Trusted proxies should always contain the local IP address IMHO...",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Of course that here is not the correct place to fix this, but I think this should be considered when adding the trusted proxies.",
                    "beginOffset": 67
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Ill remove from here.",
                    "beginOffset": 196
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "you should use (Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP), ), instead to get the header.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "This way, it will handle the header properly to keep the name caseinsensitive, whereas your code does not.",
                    "beginOffset": 104
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Uhmmm... any better approach?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "Is there any way to check getTrustedHeaderName upfront instead?",
                    "beginOffset": 30
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 2.5,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "No... you havent got me correctly.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Method is gonna always exist on Request object.",
                    "beginOffset": 35
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "The problem is that if the argument exists, it returns it.",
                    "beginOffset": 83
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Otherwise, it throws an InvalidArgumentException.",
                    "beginOffset": 142
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Look at the implementation of method Request::getTruste",
                    "beginOffset": 192
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@Ocramius it is out of this scope.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "I used the same concept of setTrustedHeaderName here, which throws the exact same exception.",
                    "beginOffset": 35
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Moreover, it brings back the vulnerability fixed by introducing the list of trusted proxies, since it bypasses the check.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": 0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@kinncj Getting it from the XForwardedFor when trusting proxies is *already* handled by the existing code.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "The returned ip should always be the closest untrusted ip, not the original IP (as headers can be forged by the client)",
                    "beginOffset": 107
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@kinncj As mentioned by @stof, the XForwardedFor header may be forged by client, so you should not trust its contents.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "But if you are sure you need this, you can always get the header contents by yourself.",
                    "beginOffset": 119
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            },
            {
                "text": {
                    "content": "Or you could suggest adding something like R",
                    "beginOffset": 206
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This is a BC break as the signature is not the same anymore.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "You should add another method that enables to switch on/off the HTML extension.",
                    "beginOffset": 61
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "should we really rely on reflection to call this method ?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "It looks hackish to me",
                    "beginOffset": 58
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Relying on reflection to get the definition looks like a hack",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Symfony keeps the method signatures on 1 line",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": 0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "As the signature changes, it should be done in master.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "The property accessor should be injected instead",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@Seldaek: Using such a path pattern, the ?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "gets encoded anyway.",
                    "beginOffset": 43
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "So it wouldnt generate a query string.",
                    "beginOffset": 64
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "If checkIp() was able to match against array, I could simplify it to this:      do {          = array_pop(),          if (!IpUtils::checkIp(, )) {             return ,         }     } while (",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Or maybe that looks better?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "= ,          while (list( , ) = each()) {             if (IpUtils::checkIp(, )) {                 if (!) {                     return",
                    "beginOffset": 38
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Wouldnt that be out of the scope of this pull, given the two other existing places in Cookie.php that already invoke GMT rather than the preferred UTC?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Is there any reason not to use array type hinting for array arguments (, , etc.)?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "typo : authentication",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "this is broken on PHP 5.3.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "The 4th parameter is only accepted as of PHP 5.4: http://fr2.php.net/manual/en/function.jsondecode.php",
                    "beginOffset": 27
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "You should push violation here and add return if null !== .",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Same in next check.",
                    "beginOffset": 60
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": 0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think its ok that you are the author.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            },
            {
                "text": {
                    "content": "To me the author is the one who had the idea/designed it conceptually or contributed large parts of the code.",
                    "beginOffset": 40
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This class not tagged with @api, but I can revert renaming if needed.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": 0.5
                }
            },
            {
                "text": {
                    "content": "But this is inconsistent inject *emergency* logger via *deprecation* event listener.",
                    "beginOffset": 70
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Im fine with reset().",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "I would like the process builder to be injected by DIC and use it for the creation of multiple processes.",
                    "beginOffset": 22
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Doing so, mocking a process builder would be easier.",
                    "beginOffset": 128
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "After installing symfony during the hack day the test was failing on my machine and an other person on Ubuntu 12.10.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "So I guessed that it was fixed in a later version of the ICU.",
                    "beginOffset": 117
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "So I made the function more detailed so that also the number behind the",
                    "beginOffset": 181
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "If the method signature is the same as the parent theres no need to redefine it.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Im not sure why youre even trying to do so. :)",
                    "beginOffset": 82
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "if ( == tls)     if ( == tls)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "_protect_identifiers() is supposed to be a protected method, but currently its public because all the drivers use it for DB forge.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Theres a protect_identifiers() method (no underscore) that I believe exist solely for this purpose  can we use that i",
                    "beginOffset": 131
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "You need to sanitize this in order to avoid path injections like these:      /%2Fetc%2Fshadow     /../example",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I dont think it should be a notice.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "The fallback from fr_FR to fr is totally normal for instance, and this would be spamming your logs.",
                    "beginOffset": 36
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Please remove the priority for the encoders.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "The order of these 2 is irrelevant (they are handling different formats anyway) and I dont see a reason to make them use a high priority.",
                    "beginOffset": 45
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.6,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "It wont delete the ones after, that is not possible in PHP.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Any locked buffer will prevent access to any buffers stacked under it (there exists ugly hack to access them, but ugly I said).",
                    "beginOffset": 60
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "The  !==  check will just prevent an infinite loop.",
                    "beginOffset": 189
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "= (bool) [cookie_secure],      = (bool) [cookie_httponly],  ... and remove the if()s below, second one is erroneous anyway  theres no [http_only] setting.",
                "beginOffset": 1
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Getting Warning: spl_object_hash() expects parameter 1 to be object, array given here.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "this should not use concatenation but query parameters (you can have SQL injection through the username currently).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Btw, doctrine DBAL supports binding an array as parameter (which is not the case of PDO itself) so it is easy: WHERE s.identifier IN(:ids",
                    "beginOffset": 116
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "There are a large number of Components that us it :)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            },
            {
                "text": {
                    "content": "Templating, Translator, Config, Console, DepencyInjection, Routing, Security.",
                    "beginOffset": 53
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "Use this regex @(return|param)s+[wd]+[] to search there usage.",
                    "beginOffset": 132
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "While this SHOULD be protected, its currently used by DB forge and utility classes and they dont extend the CI_DB_driver class.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "See [line 1181 of my version](https://github.com/narfbg/CodeIgniter/blob/4c598360d646f734d254d45b397bc26984999f0a/system/data",
                    "beginOffset": 128
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Pretty much to allow this to be protected when its all sorted out.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Ive been switching from _protect_identifiers() to protect_identifiers() in DB forge/utility for each of my driverrelated contributions, but most of them are still pending.",
                    "beginOffset": 67
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Its prob",
                    "beginOffset": 239
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "All of the methods prefixed with an underscore should be protected, unless you know that theyd be directly called by DB forge and/or DB utility as with the current implementation they wont be accessible from there.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yeah, I know ... but thats a method that Ive only seen in 2 or 3 drivers and in DB forge only, so I figured its not something standard.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Should I still change it to protected?",
                    "beginOffset": 136
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "might be clearer to inline  here instead of declaring it above.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "= (array(scope = publish_stream, read_stream)),",
                    "beginOffset": 66
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "The whole point behind previously removing this line was that theres no point behind assigning this variable to the value of one that already exists. :)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "So, it should be better to update line 191 to:       = substr([REQUEST_URI], strlen(",
                    "beginOffset": 153
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "seems to be http://twitpic.com/99jcvh/full ![wdt](http://d3j5vwomefv46c.cloudfront.net/photos/full/560215277.png?key=1025257&Expires=1334495541&KeyPairId=APKAIYVGSUJFNRFZBBTA&Signature=JzOTz5ngixLV~a7HTyoxZwaNmdS3LGs2boVL09dcETGBZKhDOlD41hxCNylilQYDkp",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This line might be going a little too far.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "It obfuscates whats going on by putting a really really big ternary in the way.",
                    "beginOffset": 43
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Can you roll it back or try to make it a little more readable?",
                    "beginOffset": 123
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "if the cookie is dirty  we just unset it",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "_clean_input_keys(,true) , _clean_input_data(, true) second attribute () should be true when we want to clean cookies",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "if cookie is not clean we unset it ,)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Im sorry, but I dont follow.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Also please note this is very important that this lifetime is not confused with other lifetimes (like cookie lifetime) for example.",
                    "beginOffset": 30
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": 0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Agree.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "Never used automated tools with that, so cant tell really.",
                    "beginOffset": 7
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "But i trust your opinion :)",
                    "beginOffset": 66
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "That will also allow other sources (PATH and COOKIE).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "Sure you want to add those too?",
                    "beginOffset": 54
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "Also () is slow, as per the notice here: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php#L460.",
                    "beginOffset": 87
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "On the oth",
                    "beginOffset": 230
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "is it needed here ?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "This is an object so it should always be assigned by reference, no ?",
                    "beginOffset": 20
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@bschussek maybe a fourth optional argument  default to null meaning current position and if set explicitly, given property path.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "But I think we might consider adding another method ie.",
                    "beginOffset": 131
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "(, E",
                    "beginOffset": 187
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Done.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "I added an addViolationAt method.",
                    "beginOffset": 6
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I would be more comfortable if we can just deprecate their usage.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Making setMessage as an alias to addViolation looks good to me but what about the other two?",
                    "beginOffset": 66
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Would they only return the first message?",
                    "beginOffset": 159
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I agree that setMessage is not a good solution add should be removed/deprecated because the addViolation does the same and is more versatile.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "If we do that, I wonder what influence does the return value of the isValid method have at all?",
                    "beginOffset": 142
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "At the mome",
                    "beginOffset": 238
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "nested might not be the best term do describe a tree structure with children",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I would suggest naming it addSubViolationAt.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Youre right, the following code still saves a variable:      public function addNestedViolationAt(, , array  = array(),  = null)     {         if ( !==",
                    "beginOffset": 46
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I renamed the methods to addViolationAtPath and addViolationAtRelativePath in the latest commit.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Relative would suggest to allow accessing the parent node as with .. in file systems.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "We should either support such feature or rename the method to addViolationAtSubPath in my opinion.",
                    "beginOffset": 86
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Well, the proxy methods are currently not easily implemented as the addViolation* methods depend on the number of parameters.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "So maybe discard this idea.",
                    "beginOffset": 126
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "But could someone enlighten me what purpose the return value of the isValid method has? (see m",
                    "beginOffset": 155
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "If were only storing the first 32 characters of a 64character hash, isnt it possible to have two hashes that are not unique?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Why not add a unique index to the activation_token field and catch a PDOException on insert that indicates a unique key prob",
                    "beginOffset": 126
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Sorry I couldnt check the issues, I was travelling.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Regarding the REMOTE_ADDR, yes your concern is true.",
                    "beginOffset": 52
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "I suggest we can change md5(microtime().[REMOTE_ADDR]) to md5(microtime().[REMOTE_ADDR].rand()) This will reduce the probabibilit",
                    "beginOffset": 105
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.9,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This sounds really weird.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Shouldnt it be an abstract factory instead?",
                    "beginOffset": 26
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "(Yes, I dont like the service name being passed to createService, its a violation of the LSP",
                    "beginOffset": 70
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "FYI, ThinkUp supports assigning custom, perview CSS in the controller.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "To do it, youd take this whole block of inline CSS, put it in its own file, and then in the LoginController add the line:  (assets/css/login.css),  Currently thi",
                    "beginOffset": 71
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Actually, looking more closely, this CSS isnt specific to login/register?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "or is it?",
                    "beginOffset": 74
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Right now its everywhere Bootstrap is enabled, but it looks pretty loginspecific.",
                    "beginOffset": 84
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "What do you think?",
                    "beginOffset": 166
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@tuxrampage Regardless of whether or not *you* feel its broken, the fact is that the code has been released asis for the entire 2.1 series, and developers are using it.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Changing the signature means breaking other peoples code.",
                    "beginOffset": 169
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "addRole(,",
                    "beginOffset": 228
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "When deprecating this, we must throw Exeptions or always silently add missing roles in the addRoleWithParents() method.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "It is essential that we use the roles from the Rbac instance to ensure all privileges will be inherited correctly.",
                    "beginOffset": 120
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "And if that role already exists?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "I think best the place to instantiate Roles is RbacRbac.",
                    "beginOffset": 33
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "DQL injection is possible here.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "you should not pass the value (which is a user input) using string concatenation.",
                    "beginOffset": 32
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "You should use a query parameter here and set the value for the parameter",
                    "beginOffset": 114
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@ADmad Very true!",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "testing with array_key_exists() now.",
                    "beginOffset": 18
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "@markstory @ravage84 It does, but I targeted master because I considered a bug: . throwing undefined index when a key is not in the viewVars array .",
                    "beginOffset": 56
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "returning a JSON encoded array whe",
                    "beginOffset": 205
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Wont these changes cause strict errors in applications?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Their code might have previously conformed to the old method signatures but will not anymore.",
                    "beginOffset": 56
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I had it implemented that way originally.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "The rijndael function uses substrings so I decided to make this the same.",
                    "beginOffset": 42
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Being more strict is an option though.",
                    "beginOffset": 116
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Do you mean run the key through pbkdf2 before using it as the key on the AES256 stage?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "One problem with pbkdf is the general lack of support.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Prior to 5.5 Im not aware of any commonly installed extension that provides pbkdf2.",
                    "beginOffset": 55
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "An alternative to length checks and pbkdf2 is to use sha256.",
                    "beginOffset": 139
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "That would mask the original key and ensure the correc",
                    "beginOffset": 200
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Another possible good idea is to add an hmac to detect tampering.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "I know zf2 does this as do a few other implementations Ive seen.",
                    "beginOffset": 66
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This block of code is repeated 3 times in Hash now.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Perhaps it would be best extracted into a helper method that does something like:  php list(, ) = self::_splitConditions(),   That would address the duplication in the",
                    "beginOffset": 52
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "this way to retrieve the salt seems like a really hackish implementation IMO.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Considering the library is designed to work only with bcrypt, it shouldnt be a problem.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "It could be \u003c, but DES should be rejected as well (its that bad)...",
                    "beginOffset": 88
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "getContent() should call encodeText(), not vice versa.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Actually... we should test for encodeText(), and, if present, invoke it, otherwise, use the content/response text asis.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "A cleaner way could be to json_encode the string casted  variable.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "yes, I wanted to listen to a view render in a crud listener, but couldnt access the view to attach an event, since the view isnt created until render() is called  had to hack around it to make it work :)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "I expected a View.beforeRender event in any cla",
                    "beginOffset": 204
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Sounds like hack, but with that difference I wonder if the call_user_func_array could be replaced until certain level by the same strategy used in [Configure::write() of 1.x version](https://github.com/cakephp/cakephp/blob/1.3/cake/libs/configure.php#",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "You should not clear the whole session cookie but only the security stuff (what if the application stores other things in the cookies ?)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Thats because the issue should only occur if the firewall tries to reload the user and this can only be done if there is a username.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Im not comfortable with this code as AFAIR, it means that the Doctrine bundle must be registered before the Security one for this hack to work.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@Ocramius No, its not  thats a remnant from before I was injecting it via the constructor.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Ill change that shortly.",
                    "beginOffset": 91
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "You can use the official [codesniffer](https://github.com/cakephp/cakephpcodesniffer).",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This permits SQL injection.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "User data should never be interpolated into the keys of a find condition.",
                    "beginOffset": 28
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I like.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "Its not obvious in the diff, but does this allow setting the value once like so:  php  = //cakephp.org/css, (foo), // http://cakephp.org/css/foo.css (array(bar, spam), //",
                    "beginOffset": 9
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Could you not use array_merge() here?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "None of the builtin hashers have nested settings.",
                    "beginOffset": 38
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "This looks good, but makes me think we should have originally added methods like Security::blowfish() and Security::matchBlowfish(, ) or made a separate utility class for Bcrypt that didnt have as difficult to remember meth",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "It is needed and is set in [constructor](https://github.com/ADmad/cakephp/blob/8ae3934378e75b2bdc7ac850f7593467fa7e7fc3/lib/Cake/Controller/Component/Auth/BasicAuthenticate.php#L55).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "I removed the overriding of  property so that if its keys are",
                    "beginOffset": 183
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Hmm, my thinking was all password hasher classes would extend the base class if we are not going to have an interface.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This is not a good idea.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "If you were to use the ValidatorPluginManagerFactory to manage validators, implementing this interface will inject the application ServiceManager instance via the ServiceManagerAware initializer present in the MVC.",
                    "beginOffset": 25
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Instead, eit",
                    "beginOffset": 241
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "10, integers in postgres are signed so one of the bits is used for the sign.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "It is actually the same in Mysql, unless it is declared as unsigned",
                    "beginOffset": 77
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Violates CS  all conditional statements must be done within a block, ala:  php if (!empty()) {     // ... }",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "You can simplify it  php if ((ZendAuthenticationAuthenticationService)) {     ((ZendAuthenticationAuthenticationService)), }",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": 0.7
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "The benefit of this class isnt really to forget how to write PHP Id say :)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            },
            {
                "text": {
                    "content": "The main thing is that this provides encapsulation, allows you to run many request/responses within one process (for testing, subrequests, app server in php etc).",
                    "beginOffset": 75
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "The mobile hack has been removed.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "@kriswallsimth added this hack a while back (dont remember why).",
                    "beginOffset": 34
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Im fine with getting rid of it but this is not entirely BC.",
                    "beginOffset": 99
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Different styles used in the file.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "I selected this one, as @see is not related to the function signature.",
                    "beginOffset": 35
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Where can I read guidelines for docblocks?",
                    "beginOffset": 107
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Especially regarding aligning different parts of docblock.",
                    "beginOffset": 150
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Nit: probably should be capitalized (_DEPRECATED_COOKIE_SETTINGS) since its a constant.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Better to use the cake.power.gif image from Test/test_app/.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Also as per cakes coding standard there should be a space before and after each ..",
                    "beginOffset": 60
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "You can use https://github.com/cakephp/cakephpcodesniffer",
                    "beginOffset": 143
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Id rephrase: The session cookie is now deleted after flush() is called.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I came across this issue, and just applied a base64 sledgehammer to the output (which is what the Rails patch mentioned in the Trac issue does also).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "I did consider the VigenÃ¨recipherstyle approach, but at that point I had already done most of the wo",
                    "beginOffset": 151
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This is the signature used in the constructor.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "That is why I used it in the setter.",
                    "beginOffset": 47
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Thats quite the selection in behaviour.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "This is all to handle the case where the referring URL & loginRedirect are inaccessible to the user who is logged in?",
                    "beginOffset": 40
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Actually for this particular check, I think there may be a simple solution.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "When AUTHENTICATION_BACKENDS is set only to the modelbackend (the default), consider a nonunique usernamefield to be an error, otherwise a warning that mentions your custom b",
                    "beginOffset": 77
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Here I think we just should just default to json.dumps if no encoder is specified.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "No need for an extra setting.",
                    "beginOffset": 83
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I can see a decent reason to use the DjangoJSONEncoder as the default as it gives us Decimal and datetime support for free.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "These are very common use cases for django sites (especially datetime!).",
                    "beginOffset": 124
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Agreed DjangoJSONEncoder would be better default encoder class.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "return   0 would suffice here.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "also, never forget the {} for if statements",
                    "beginOffset": 31
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "It is trivial, it can be changed if you consider it appropriate...",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "in fact, I just added this here for consistency I suppose.",
                    "beginOffset": 67
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Cause the easiest way to hack into generating enum values was to use PHPMyAdmins approach: to use the (already available)",
                    "beginOffset": 128
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Do you really need md5?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "For me it does only consume CPU with no benefit for this purpose, spl_object_hash contatenation is enough.",
                    "beginOffset": 24
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "yup.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "i thought of that too but wanted to avoid introducing a new option.",
                    "beginOffset": 6
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "but i agree its cleaner and less hacky.",
                    "beginOffset": 74
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "Ill adjust the PR.",
                    "beginOffset": 115
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Thanks.",
                    "beginOffset": 135
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I think you can have problems supporting / inside a URL if we dont encode it.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Thats really just a big hack.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Also, its weird to remove these specific parameters and not others.",
                    "beginOffset": 30
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Actually, your subject line details it: you want to inject the element manager into an existing factory, if present.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Sorry, you are right about that, i think we should always unset it in BaseAuthenticate if present in the userdata, not only if its in the conditions.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": 0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "fixed (i will install code sniffer quite soon!)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": 0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Missing spaces after ,.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Please use the code sniffer for these types of errors.",
                    "beginOffset": 25
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@return  is definitely an invalid annotation, phpdoc will not expand it.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "On Wednesday, February 6, 2013, Abdul Malik Ikhsan wrote:   In library/Zend/Permissions/Rbac/Rbac.php:    @@ 23,7 +23,7 @@ class Rbac extends AbstractIterator",
                    "beginOffset": 74
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Indentation is not correct here.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Also there should be space before and after =.",
                    "beginOffset": 33
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "You can use the [codesniffer](https://github.com/cakephp/cakephpcodesniffer) to avoid such errors.",
                    "beginOffset": 80
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Indentation is still incorrect, better use the code sniffer.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "The use of Empty that is imported from models.fields looks very weird until one looks at its definition.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Cant you use object() directly?",
                    "beginOffset": 105
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Edit: No, you cant, Python2 wont let you.",
                    "beginOffset": 139
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Still, the use of a class imported from fields feels hackish.",
                    "beginOffset": 181
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Can you please rename it to addToWhitelist ?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "First time I read this I thought it was ment to add fields to a query",
                    "beginOffset": 45
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "it is for adding fields to a query or to the whitelist?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "fieldList == whiteList though.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "But isnt fieldList a copy of the whitelist?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "I think that is what @lorenzo and I are trying to get at.",
                    "beginOffset": 44
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Perhaps this doesnt need to be a public method?",
                    "beginOffset": 103
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "It is just a helper method after all.",
                    "beginOffset": 152
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Indeed the fieldList is a whitelist.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "I too think it should be a protected method.",
                    "beginOffset": 37
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Yup, knew Id forget something...",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Should be, but as i said already, im trying to stick to the already defined phar support lines in DIC: https://github.com/symfony/DependencyInjection/blob/master/Loader/XmlFileLoader.php#L329 ,)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Note that is_password_usable() already checks whether password is None, so the double check that used to be here was obsolete anyways.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "The security.interactive_login event is not dispatched by the kernel either, but it uses the same event dispatcher.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Having several global event dispatchers adds overhead and makes things more complicated so it has only drawbacks.",
                    "beginOffset": 116
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "you should not retrieve them from the container but use dependency injection.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Thats what I told to myself, but it is much faster and easy to read this way.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "I dont like this kind of naming convention either but I found it better than injecting 4 services or add a dedicated section in the loader to get tagged services.",
                    "beginOffset": 78
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "I might be w",
                    "beginOffset": 241
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Injecting the container is not using dependency injection.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "The translation loader are already tagged so just use this tag.",
                    "beginOffset": 59
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I think that this should be undo too for to have a test with the same salt stored in the object and different algos.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "You forget about one slash ,)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 2,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "As I previously said, I dont think we should whitelist TLDs.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Just like we can not whitelist SLDs.",
                    "beginOffset": 61
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Its too complex for the scope of this validator, people can complain all they want imo..",
                    "beginOffset": 98
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Im 1 on whitelisting.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "The goal of the URLValidator is to validate that the URL is semantically correct, not that the URL actually exists.",
                    "beginOffset": 22
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Exceptions should include a useful description based on what the failure is.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Perhaps Invalid encryption scheme chosen.",
                    "beginOffset": 78
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Why are you treating  and  as mutually exclusive?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Could we not have both?",
                    "beginOffset": 50
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "If not, why not?",
                    "beginOffset": 74
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Except that the callable type hint is only available starting in 5.4, and we support 5.3...",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "On Jan 21, 2013 12:35 PM, Kathryn Reeve \u003cnotifications@github.com wrote:   In library/Zend/Authentication/Adapter/DbTable.php:    @@ 192,6 +205,18 @@",
                    "beginOffset": 92
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "open curly rbace in this line",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "These should stay at DEBUG level as they are about debugging the authentication.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Maybe you should make it more DRY (by reusing force_text(data, encoding, errors=replace)).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Later someone may actually forget to change it in two places.",
                    "beginOffset": 91
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Or you think handler.variable_complete and self._post.appendlist should stay as you proposed?",
                    "beginOffset": 153
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Maybe we could raise a ValueError if self.use_ssl and self.use_tls?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "The message should also make reference to EMAIL_USE_SSL and EMAIL_USE_TLS since we default to them when use_(ssl|tsl) are None.",
                    "beginOffset": 68
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "s/MD5/SHA1/",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think there are enough tests about forms using the formats machine to sanitize input values.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Id rather specifically tests sanitize_separators in a separate test_sanitize_separators test.",
                    "beginOffset": 95
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "You have an typo here (parse error), forgot to close bracket.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "\u003cpre  if (application/xwwwformurlencoded == (CONTENT_TYPE)      && in_array(strtoupper((REQUEST_METHOD, GET)), array(PUT, DELETE))  ) {",
                    "beginOffset": 62
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think we need two maps here.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "Someone could implement this on different classes like      class XmlEncoder implements EncoderInterface {}     class XmlDecoder implements DecoderInterface {}  The other option would be to only have one interface, and then",
                    "beginOffset": 31
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yeah, @Seldaek and I discussed these options briefly.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "We agreed that separating the Encoder/Decoder is a bit overboard and would lead to a lot of additional methods.",
                    "beginOffset": 54
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "As for a supports*() method in the Encoder, that would also work fine for me, but I think",
                    "beginOffset": 166
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Im with lukas on this one, splitting up means a lot of new methods on the Serializer, and doesnt really benefit much besides the extremely rare use case of a Decoder that can not encode, which is the only case not covered currently.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "If you insist though",
                    "beginOffset": 233
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think its quite clear when the person has a look at the interface whats what :)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            },
            {
                "text": {
                    "content": "Another alternative would be to rename the DecoderInterface into EncoderDecoderInterface to make it even clearer.",
                    "beginOffset": 82
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Its simple, duplicating the entire encoder API inside the Serializer to add the possibility of decoder only doesnt seem sensible, given that encoding is in most (all?) cases easier and more important than decode.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "So we simply make the decision to keep it",
                    "beginOffset": 213
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yes, Im ok with making DecoderInterface extend EncoderInterface, because that makes sense and clarifies how it is.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "The alternative is just more wasteful and complex for almost zero benefit (you still can implement an encoder/decoder that throws an except",
                    "beginOffset": 115
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think that it is perfectly valid to only implement a decoder.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "This would be closing the door where we dont have to.",
                    "beginOffset": 64
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Its more flexible to have only one interface, and Lukas use case in the rest bundle can still be supported.",
                    "beginOffset": 118
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            },
            {
                "text": {
                    "content": "On Mon, May 9, 2011 at",
                    "beginOffset": 227
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "valid or real world relevant? :)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "again i think duplicating all encoder methods in the serializer to support decoders separately would be insane.",
                    "beginOffset": 33
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "if you have a separate encoder and decoder implementation for a format, then you can always wrap them in one c",
                    "beginOffset": 145
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Again, the point is that I (and @Seldaek) dont see a decoder only as a relevant use case that needs our attention, especially if supporting it causes such a mess.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "On the other hand an encoder only has relevant use cases.",
                    "beginOffset": 163
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "So do you have a relevant use ca",
                    "beginOffset": 221
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Do you still intend for this to use Cookie (vs. SetCookie)?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "If so, you need to readd the import, if not, this should be updated.",
                    "beginOffset": 60
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "may handle the majority of cases **as is, for** projects where authentication needs",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "link to topics/auth/default.html#authenticationinwebrequests?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 2.1,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "this seems wrong.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "This will be broken when using several firewalls as they will all use the config of the first firewall configured to use a max session.",
                    "beginOffset": 18
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "So all other firewalls wont be using their config",
                    "beginOffset": 154
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "When using the useUploadName option, should we be doing any sanitizing of the [name] value which will be used as the target filename?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "The basename() should help, and I hesitate to change the filename too much if the user is expecting all",
                    "beginOffset": 136
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yeah, true, But I dunno if it would break userland code if init() would not register the Behavior in the Collection, but instead do nothing.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "But I trust your judgement in these things :)",
                    "beginOffset": 141
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This code assumes that the filesystem uses utf8, because thats what force_str defaults to.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Furthermore, under Python 2, when force_str (ie.",
                    "beginOffset": 92
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "force_bytes) is called on a bytestring with as encoding argument that isnt utf8, it decodes the stri",
                    "beginOffset": 141
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.8
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "This is also wrong, LANGUAGE_COOKIE_NAME is the name of the cookie, not the name used in the session.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.8,
                "score": -0.8
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I know that LANGUAGE_COOKIE_NAME is the name of the cookie.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "I think thats the same name used in the session and in the cookie.",
                    "beginOffset": 61
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "The string django_language is in use only three times in the whole django tree...",
                    "beginOffset": 129
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "here and two more   django/conf/glob",
                    "beginOffset": 211
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.6,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Why should we then even trigger the SEND_HEADERS event?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "We can also register a listener on MVCs EVENT_FINISH and forget about SEND_HEADERS event.",
                    "beginOffset": 56
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "You can also remove there unneeded/ unwished headers.",
                    "beginOffset": 146
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "If the default is callable, then the default shouldnt stay in the table.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "This function may be too lowlevel to handle this, but it hints that once weve got the specific value, we forget that it was callable.",
                    "beginOffset": 73
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "I think that in this case, column_sql shoul",
                    "beginOffset": 207
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Dont use ZendJsonDecoder.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Use ZendJsonJson::decode() instead, as it uses json_decode() by default.",
                    "beginOffset": 26
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Decoder should only be used in rare occasions, typically when the JSON is known to be in an encoding other than UTF8, or where you know JS lam",
                    "beginOffset": 99
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Im wondering if this check should be configurable.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Its not uncommon to define custom media types such as application/vnd.my.app+json  which would fail this check, but still be something youd want to automatically decode.",
                    "beginOffset": 51
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "The configuration could be",
                    "beginOffset": 221
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I mean:    import ZendJsonJson instead of ZendJsonDecoder  Use Json::decode() instead of Decoder::decode()  In other words, continue with automated decoding, just change the mechanism. :)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@apollo13  I just updated my branch to clean the extra hashes.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "I raised ValueError because its more consistent with the rest of ModelForm (raises ValueError when no model is specified and when save is called when the form doesnt vali",
                    "beginOffset": 63
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.8
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Still existing the posibility of  = null  in such case hmac will throw a couple of warnings and return false  I think that we dont need to check if  is null",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.8,
                "score": -0.8
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "i think you should inject small circles inside the zeros, its just badly designed otherwise and inconsistent with the os.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "the code is fine like this.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "Using call_user_func is slower and it obfuscate the code.",
                    "beginOffset": 28
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "If youre going to implement these, you should likely also implement the EventManagerAwareInterface, which would make it possible to get this autoinjected via the service manager.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Dont forget to remove the comment if its not used",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Ah right ..",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "the namespace in that file is just incorrect  https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Exception/NonceExpiredException.php",
                    "beginOffset": 12
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Cant do this in the LDAP exceptions, as the custom LDAP component exception class does not have previous exception support.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.6,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Whoops!",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": 0.5
                }
            },
            {
                "text": {
                    "content": "Looks like something I added as a temporary hack during debugging, and then accidentially left in place.",
                    "beginOffset": 8
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "This explains why I had two places stripping quotation marks: this one and my own line 452.",
                    "beginOffset": 113
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "I guess Id better remove lines 442 through 444.",
                    "beginOffset": 205
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "M",
                    "beginOffset": 253
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "GoogleOAuth2Mixin.authorize_redirect should differ from OAuth2Mixin.authorize_redirect only in googlespecific ways.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "We dont construct absolute urls in the base class or in the facebook mixin, so we shouldnt here either (I think this may mean that",
                    "beginOffset": 117
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yes, I think it does make sense to add scope and response_type (and more generally, anything from the oauth2 spec) to the base class.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "(and in case you missed it I had another comment in the diff from before, about the use of parse_qs_bytes vs json)",
                    "beginOffset": 137
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "That was behaviour from the helper already.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "But the  is passed by reference, see the & in the method signature.",
                    "beginOffset": 44
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "This protected method is afaik only used in setContainer(), you can check it there its called and the return is not used.",
                    "beginOffset": 112
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Imho its",
                    "beginOffset": 235
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "IIRC there is a config file for csfixer with the possibility to add a whitelist",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0.1
        },
        "language": "pt-PT",
        "sentences": [{
                "text": {
                    "content": "Look Ã¡t.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "Line 91.",
                    "beginOffset": 12
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Enviado via iPad  Em 10/04/2013, Ã s 07:05, Brian Jones \u003cnotifications@github.com escreveu:   In tornado/auth.py:     @@ 1096,6 +1096,7 @@ class FacebookGraphMixin(OAuth2Mixin):        _OAUTH_AUTHORIZE_URL = https://gr",
                    "beginOffset": 23
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.9,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "IMO really we shouldnt maintain the BC for this.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Make the return of this function too weird.",
                    "beginOffset": 49
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "boolean for some values that are too integers, PHP allows this behavior but is really weird the method signature",
                    "beginOffset": 94
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.9
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I dont like that this needs to duplicate the injectResponse from PhpRendererStrategy",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.9,
                "score": -0.9
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "as far as I remember md5() now internaly uses hash() (wich is in PHP core), so I guess there is no difference I just removed function_exists() check for hash",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "base64.b64encode would be even more efficient, I was simply reporting the bug",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Shouldnt this always be 1.0?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "The rest of the tornado.auth code is pretty much hardwired to handle either version 1.0 or 1.0a, and if we always need to send 1.0 in the 1.0a case, all cases are covered.",
                    "beginOffset": 30
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "This also makes the _oauth_version_to_send()",
                    "beginOffset": 203
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "See note on the FileResolver implementation  if  can be optional, it should be defined as such here, otherwise, all implementations need to make it a required argument.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.8
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "this param dont exists in the method signature",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.8,
                "score": -0.8
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.8
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "this param dont exists in method signature",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.8,
                "score": -0.8
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.8
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "The PHPDoc doesnt match with the method signature.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.8,
                "score": -0.8
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Hmm, the whole point is to put it in consistency with the rest of ZendCrypt @ezimuel introduced [this flag](https://github.com/zendframework/zf2/blob/master/library/Zend/Crypt/BlockCipher.php#L47) to control binary/string output.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Also native PHP hash/hma",
                    "beginOffset": 230
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Isnt this violates HeaderInterface rules?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "missing @group Zend_Crypt here",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Can you remove the unnecesary import?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "use ZendAuthenticationStorage as AuthenticationStorage",
                    "beginOffset": 38
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Can you remove the unnecesary import?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "use ZendAuthenticationStorageStorageInterface as AuthenticationStorage",
                    "beginOffset": 38
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "If this is too long it is acceptable to do:    params = {     SetCookie: (foo=deleted, expires=Thu,                     01Jan1970 00:00:01 GMT) }",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Appropriate ProxyAuthorization header could be set in proxy_headers keyword argument for proxy_from_url().",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "I dont really think that proxy authentication belongs to urllib3, so I suggest to wrap proxy_from_url in requests with something like:",
                    "beginOffset": 107
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 2.1,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Very confident.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "In dispatch hook any subsequent requests are sent via the adapter.",
                    "beginOffset": 16
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "The sessions send method is what extracts already existing cookies for us.",
                    "beginOffset": 83
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "This is why any cookies that were received while dispatching hooks were not caught.",
                    "beginOffset": 158
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "alternatively, use cookie.value = cookie.value.replace(, ) if we want to keep the double quotes, removing the /s",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@fcurella you mean request.set_cookie(key, param1:param2) right?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "If so that makes sense.",
                    "beginOffset": 65
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "But yes, adding a test and ensuring this doesnt break anything else would be awesome.",
                    "beginOffset": 89
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@sigmavirus24 +1.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "Regexes are only worth using if youre actually defining a complicated grammar.",
                    "beginOffset": 18
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "If you dont use a single regex special character, you didnt need a regex. =)",
                    "beginOffset": 97
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.8
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "false actually has a special meaning internally, and should not be removed from the signature.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.8,
                "score": -0.8
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This should not be called EventsAware.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Aware interfaces are for hinting to the DIC that a setter needing autoinjection is present.",
                    "beginOffset": 39
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Id rename it to something like EventsCapableInterface instead.",
                    "beginOffset": 131
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I feel like with there being a link to the official OAuth site *and* a link to the requests_oauthlib repo, the change makes sense",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": 0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Mm, Im not sure.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "I dont see why we need to link to the official OAuth site.",
                    "beginOffset": 17
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "What are  and  for?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "The setServer method adds cookies to the header object, so it was being done twice.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "multipart/formencoded  multipart/formdata",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Id actually argue here we import MessageDescription, and change the signature of dispatch to: php public function dispatch(Message , Message  = null),",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This makes serialisation of lists is inconsistent between application/xwwwformurlencoded and multipart/formdata requests.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "See https://github.com/kennethreitz/requests/issues/737#issuecomment7305046 for more details.",
                    "beginOffset": 124
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Youre twisting my words a little bit, but its ok :)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "Your examples are strange.",
                    "beginOffset": 53
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "[krsort()](http://php.net/manual/en/function.krsort.php) is designed to sort arrays while maintaining keys (i.e. associations, as the name suggests)  hence it should not",
                    "beginOffset": 80
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Shouldnt it (and all other calls to json_encode()) be ZendJsonJson::encode()?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "We still need to inject the locator, once we know we have a valid controller.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I think this would incorrectly urlencode the domain component of a URL with internationalized domain name, wouldnt it?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "The recent OAuth merge included some changes to abort() to add additional info: https://github.com/reddit/reddit/blob/master/r2/r2/lib/base.py#L66  Instead of creating Yet Another Abort With Error Message (Im pretty sure we have two now), is it possible",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Corrected in SHA: 58a13d7",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "In the unit tests I wrote to handle _sign_strings three use cases (private key file object, private key file name, private key string), the private key file object test was failing because no data was being read from the file object.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "The seek(0) fixed th",
                    "beginOffset": 234
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think thats reasonable.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            },
            {
                "text": {
                    "content": "One of the changes Ive added to the provider module was to log where the credentials are coming from, so I went ahead and added log messages for keyring credentials as well.",
                    "beginOffset": 27
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "I also added a log message when the keyring module",
                    "beginOffset": 202
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Wouldnt it make more sense for this check to happen up a level?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "It just seems odd that compute_hashes_from_fileobj raises an EmptyArchiveError.",
                    "beginOffset": 65
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "It seems more appropriate for Vault.upload_archive to perform the empty file check and raise an except",
                    "beginOffset": 146
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Not quite sure why these LB cookie methods are included in this PR.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Are they related?",
                    "beginOffset": 69
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "The changes will break existing code but if there is a good reason, it may still be the right thing to do.",
                    "beginOffset": 88
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "Just need a bit more background.",
                    "beginOffset": 196
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Unfortunately, this will cause SSL certificate verification to fail on all Python versions \u003c 2.7.3.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "The endpoint we use MUST match the commonName in the SSL certificate since the Python ssl module is unable to find the subjectAlt fields in the certificat",
                    "beginOffset": 101
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This is just another of the things I noticed and fixed while this pull request was waiting.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "I dont believe I can create multiple pull requests with the different bits so it got included here.",
                    "beginOffset": 92
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            },
            {
                "text": {
                    "content": "The reason for this change is that the cookie_expiration_pe",
                    "beginOffset": 193
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Hmmm.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "I dont have an environment at home to test with but I was thinking...",
                    "beginOffset": 6
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "why do I have to decode() here???",
                    "beginOffset": 76
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Shouldnt the object already be in unicode?",
                    "beginOffset": 110
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "I remembered thinking about the DeleteMarker and Key objects where they parse xml and pondering the",
                    "beginOffset": 153
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "With no config UI thisll erase the whitelist on config save I believe.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "we do this for when we generate the md5 apikey, try the newer hashlib but fallback to the legacy md5 (pre python 2.5)          try:             from hashlib import md5         except ImportError:             from md5 import md5",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "md5 is only needed for pre python 2.5.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Since the minimum requirement for Sickbeard to run is python 2.5, this is useless",
                    "beginOffset": 41
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": -0.8
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "providers shouldnt have to have their own hacked name.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "this is a horrible approach",
                    "beginOffset": 55
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "yeah makes sense.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            },
            {
                "text": {
                    "content": "The calls to this function are limited enough that itll be easy to adjust the calling signature",
                    "beginOffset": 19
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I know, but for consistency I followed the lines above and below.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "I can definitely make a separate commit to change the Hash style of this file (or the whole actionpack)",
                    "beginOffset": 66
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "May you use 1.9 hash style",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Use django.contrib.auth.views.redirect_to_login to redirect to the login page (see https://github.com/divio/djangocms/blob/develop/cms/views.py#L136)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Since you dont expect false to be passed for encoded_masked_token with different semantics than nil, its simpler to write:  ruby   return false unless encoded_masked_token",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "What about making this a hash?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "TRANSLATIONS = {       class = self.class,       ...     }",
                    "beginOffset": 36
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "And then:      to = TRANSLATIONS[to] || to",
                    "beginOffset": 96
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Its a bit confusing to have an Oracle reference in a testcase which is named PostgresqlReferentialIntegrityTest.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Can you check wether this is necessary with PG so we can get rid of the comment in the parenthesis?",
                    "beginOffset": 113
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I still think we should get rid of these helper methods if possible.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "See https://github.com/rails/rails/pull/10939#issuecomment23920944 for context.",
                    "beginOffset": 69
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "This could look like:  ruby module ReferentialIntegrity   SAVEPOINT_NAME = disable_referential",
                    "beginOffset": 150
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "The test_disable_referential_integrity_as_.*_with_invalidated_transaction tests verify that if the passed block invalidates the current transaction, our code successfully rolls back to a savepoint and is able to reenable referential integrity.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "The",
                    "beginOffset": 245
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "How about testing with more nesting levels and also in 2d arrays?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "e.g.  string  ruby {   a = b,   nested_hash = { c = d },   nested_array = [{ g = [{ h = i }] }, [{ j = [{ k = [[{ l = m }]] }] }]] }   s",
                    "beginOffset": 66
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think this might actually be fine since @@sse_clients is Hash that is only ever written into during an app boot, am I right @dahakawang?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "However why use a global hash at all?",
                    "beginOffset": 139
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Why not use a plain ivar, by changing self.extended (and other methods)",
                    "beginOffset": 177
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I tried something like this \u003ccode around_filter :around_filter_with_proc, if: Proc.new{|c| @state \u003c\u003c around_filter_proc}, only: :around_filter_proc \u003c/code  1) For if  key when i use the new hash syntax i am getting syntax error, Looks like if",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Im not sure we need to do this based on checksums.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "If somebody touches a file, we should probably send a notification of a change.",
                    "beginOffset": 52
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "I think we should avoid the checksums unless theres a need.",
                    "beginOffset": 133
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Please use 1.9 hash style.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "this should check if the cookie is already set, if so, dont set it as otherwise it will bust upstream caches...",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Please, use 1.9 hash syntax here.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Thanks.",
                    "beginOffset": 34
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.8
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "the problem is: this is an overwrite of a reversionadmin function and i wouldnt like to change the signature of the function",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.8,
                "score": -0.8
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Can this be handled in the actual database adapters?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "I.e.",
                    "beginOffset": 53
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "by putting PG specific code in the PG adapter.",
                    "beginOffset": 58
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Maybe by adding e.g. a :fixed_string entry to the native_database_types hash, and using fixed_#{type}.to_sym if fixed is true.",
                    "beginOffset": 106
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "django docs prefer is_authenticated()...  https://docs.djangoproject.com/en/dev/topics/auth/customizing/#django.contrib.auth.models.AbstractBaseUser.is_anonymous",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "You could also use something like: ruby column_names_with_alias.each_with_object({}) do |(cn, an), hash|   hash[cn]= row[an] end  which is more idiomatic but avoids the array allocations.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "It does not return a Hash but an Array",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "You may use 1.9.3 style for hash.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "jonas:~ python2.5 Python 2.5.6 (r256:88840, Dec 16 2011, 14:22:12)  [GCC 4.6.1] on linux3 Type help, copyright, credits or license for more information.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "from dj_database_url import parse  parse(postgres://user:password@host:1191/",
                    "beginOffset": 154
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Can we use the Ruby 1.9 hash syntax here?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@senny Im afraid that its difficult to understand to mix symbol with hash without brace.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Client.order(:orders_count, created_at: :desc) #= OK  Client.order(created_at: :desc, :orders_count) #= SyntaxError  Client.order({created_at: :desc}",
                    "beginOffset": 91
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.8
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Dont forget to fix this something went wrong code comment as it is no longer correct (once the && !digest is removed).",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.8,
                "score": -0.8
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Is that still not a valid statement?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Reason being is #digest will always return a string:  Scenario 1: Digest::MD5.hexdigest has no problems, and always returns a string  Scenario 2: Digest::MD5.hexdigest has a problem, raises an error, which th",
                    "beginOffset": 37
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Itd be cool to make sure hashes work as well instead of just arrays.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "And arrays of hashes.",
                    "beginOffset": 69
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "(Mostly that liquid exposes them properly)",
                    "beginOffset": 91
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": 0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "OK, Ive refined the feature to cover arrays, hashes and arrays of hashes.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": 0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 2.1,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "It seems like this could be abused.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "If someone were to take a normal signed message and change the  to @ it would be treated differently and would have totally different results.",
                    "beginOffset": 36
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Whatever is telling  us to treat it as an expiring signed message als",
                    "beginOffset": 179
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "It is a bit janky, but we could have the expires integer be a permanent signed message nested within the impermanent signed message.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Alternatively, we could just add a third value that is a meaningless token that hopefully would never exist in an actual s",
                    "beginOffset": 133
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Doesnt this lead to the following property:      \u003cbase64_data\u003cexpires_int\u003chmac      \u003cbase64_data\u003cexpires_int\u003chmac  Wouldnt both of these values result in the same value for generate_digest?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Then, the comparison done above on line 53",
                    "beginOffset": 191
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Assuming you dont depend on deserialization and/or base64 decoding for verifying integrity (see my other comment below), then maybe you could defer deserialization until after you have verified expiry.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "You dont need the deserialized object to verify in",
                    "beginOffset": 203
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Kind of, the deserialization would fail at line 54, but I agree that we shouldnt allow that kind of tampering to pass the hmac check in any case.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Perhaps the best approach is to push this all into the cookie jar thereby not adding risks that we subtly",
                    "beginOffset": 147
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "1.9 style hash.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Needs to have API documentation similar to the other Hash and other core_ext docs.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "True, I just noticed the use of ActiveSupport::OrderedHash in other parts of the lib, so I followed that.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "By switching to a plain hash @wangjohn s comment would also be solved.",
                    "beginOffset": 106
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Well, it would be safer to use assoc = Hash.new { |h,k| h[k] = [] }",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Will this not break SSL?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.8,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Why do you need to set defaults for name and options since original function didnt set them?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Especially being as confusing as they are (name defaults to hash while options defaults to nil, intuitively it should be the other way around!)",
                    "beginOffset": 93
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "You seem t",
                    "beginOffset": 238
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 2.5,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Well.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "Forget about it.",
                    "beginOffset": 6
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Ill merge and change it.",
                    "beginOffset": 23
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "No need to give you more work.",
                    "beginOffset": 48
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": ":smile:",
                    "beginOffset": 79
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I think is better to assert the return of the sanitize_sql instead of assert_nothing_raised",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "If you only expect one name, why do you accept varargrs?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "super (Enumerables group_by) doesnt accept args at all (other than block), so there is currently no need for method signature to accept more than a single name.",
                    "beginOffset": 57
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Granted, it might be inter",
                    "beginOffset": 219
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I think you can check against settings_change instead of the full hash of changes, wdyt?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Another possible solution, but (at least to me as nonrubyist) just as cryptic if not worse.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Whats wrong with the ifblock?",
                    "beginOffset": 92
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": 0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Thanks for your review.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "At first I was trying to use just count but it works as follows.",
                    "beginOffset": 24
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            },
            {
                "text": {
                    "content": "count actually returns a Hash.",
                    "beginOffset": 89
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Test case count only ruby +      assert_equal 3, authors(:david).posts.merge(posts_with_special_comments_with_ratings).",
                    "beginOffset": 122
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This conditional tells me that this class has now been overloaded to the point where it violates SRP (Single Responsibility Principle).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Why cant we offer the same feature through a different tag, perhaps named formatted_include?",
                    "beginOffset": 136
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "This leaves the normal",
                    "beginOffset": 229
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Since delegate [uses][1] module_eval internally it doesnt buy us anything.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "[1]: https://github.com/rails/rails/blob/3b7947ea31489afd020419e3c22ee01ce4809103/activesupport/lib/active_support/core_ext/module/delegation.rb#L115",
                    "beginOffset": 76
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "According to my point of view, its always better to write the test cases rather than trusting on the setup.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "In any case, there is no harm in adding the test scenarios which ensures that the proper options have been setup.",
                    "beginOffset": 108
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            },
            {
                "text": {
                    "content": "Would like to know your opinion",
                    "beginOffset": 222
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "OK...",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            },
            {
                "text": {
                    "content": "But about the merge!, it would be better if you use it, its pretty more fast and use less memory, since the merge returns a merged new copy of the hash, and merge!",
                    "beginOffset": 6
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "just merge in the existent instance.",
                    "beginOffset": 170
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Even for API requests, you may want to use CSRF protection.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "This version number is being found from the URL, try brew audit robovm.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "There are two when.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Also, its not clear what its smallest key is larger than the number means?",
                    "beginOffset": 20
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "I think its just because your units hash does not contain the searched key, not actually because of smallest vs larger, not?",
                    "beginOffset": 95
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Ok, it installs *a lot* of files into the cellar, so hold onto you hat:   $ tree / /usr/local/opt/livemedia/ | BasicUsageEnvironment |   | BasicHashTable.cpp |   | BasicHashTable.o |   | BasicTaskScheduler.cpp",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think theres a mistake in this method, columns_hash is not correctly being used, as @tenderlove has fixed in d29235d2a4df94b6db7d3e45ab15a6799363384e for branch 32stable.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Im going to forwardport his commit to master, @yahonda can you check it agai",
                    "beginOffset": 173
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@carlosantoniodasilva this is correct.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "In master its a method call, in 32stable its a hash.",
                    "beginOffset": 40
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "It does work, but it is quite old and has no support for AESGCM.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "The advantage of using OpenSSLs AESGCM implementation (instead of our own) is that they leverage the AESNI instruction set of current Intel CPUs, making it quite a bit faster.",
                    "beginOffset": 65
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            },
            {
                "text": {
                    "content": "Since s",
                    "beginOffset": 241
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "It looks like your code will convert this JSON:      {person:[null]}  to this Ruby hash:      {person: nil}  Is that right?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "this is tricky, problem is with apples provided openssl (v. 0.9.8) library is failing when connection go the SNI (vitrual ssl hosts).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Issue is showing e.g. with git build against libcurl (where libcurls is using systems openssl).",
                    "beginOffset": 135
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "example log from",
                    "beginOffset": 232
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "one more developent, this error is related to the openssl bundled with the osx, however if CommonCrypto is being used (withdarwinssl) tis error seams resolved.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Maybe it will be a best option to use withdarwinssl as default option on osx  first",
                    "beginOffset": 161
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Because you get the right version through inheritance.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": 0.5
                }
            },
            {
                "text": {
                    "content": "See https://github.com/rack/rack/blob/master/lib/rack/session/abstract/id.rb#L284286  Also !session.is_a?(Request::Session) is wrong because we also have NullSessionHash which inherits from Racks",
                    "beginOffset": 55
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.8,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yes I was reusing Rack initializer but that way Im passing NullSessionHash creators the responsibility to define a null store which should be in NullSessionHash.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "So agree.",
                    "beginOffset": 162
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "Fixed https://github.com/rails/rails/commit/e3b9b25aa3cbe6344425a346e6e73073ca6",
                    "beginOffset": 173
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "An extremely hacky way might be to set /Users/Jevans to something else.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "why not new hash syntax?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "The convention schema.rb uses is to use the new ruby hash syntax with string keys.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "ie:  add_index pizzas, [awesome], name: index_just_kiddings_on_awesome, type: :fulltext  Without symbolizing the keys, we would need to either make the sch",
                    "beginOffset": 84
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": 0.7
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This list is useful to me.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            },
            {
                "text": {
                    "content": "I always forget what are the supported methods and I always look this guide.",
                    "beginOffset": 27
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Use ruby 1.9 hash syntax",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Still need the hash syntax update?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": 0.8
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Sure, http://www.openldap.org/its/index.cgi/Incoming?id=7656 :smile:",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.8,
                "score": 0.8
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Why not integrate this as the else clause of an adapted clause stating at line 65  if force_random  elsif params[:password].present?   ...",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "else   render_api_error end",
                    "beginOffset": 139
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think its better to throw an API error if both options are set at the same time.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Introducing an implicit preference violates the principle of least surprise.",
                    "beginOffset": 83
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think both if statements are related so it is better to bundle them.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "In the second statement you already expect a params[:password] to be set if there is no force_random.",
                    "beginOffset": 71
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "It seems better to put the exception handling there as well.",
                    "beginOffset": 173
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "This will also reduce",
                    "beginOffset": 234
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "if the short SHA is sent in the ENV variable, this is still a problem right?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "I d suggest to remove the ENV check for the full version.",
                    "beginOffset": 77
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I think its related to https://github.com/nikitug/rails/blob/d2abfcbd8c55d5bfbbccaf0e34be8a67f4731ac3/activesupport/lib/active_support/core_ext/hash/conversions.rb#L100 (not v.is_a?(String))",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": 0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yeah I saw the commit, no worries, thanks!",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "On Sun, Nov 11, 2012 at 12:14 PM, Nikita Afanasenko \u003c notifications@github.com wrote:   In activesupport/lib/active_support/core_ext/hash/conversions.rb:                 if value[type] == array",
                    "beginOffset": 45
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Im holding off till the auth stuff is all done refactoring.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Then Ill revisit everything.",
                    "beginOffset": 61
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "The reason I didnt do the iconwithlink route is because this is meant to be silent SSO  e.g. you just visit gitlab and if youre already logged into openid",
                    "beginOffset": 91
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Use 1.9 ruby hash syntax please",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Use the Ruby 1.9 hash syntax",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think text/rtf is not part of the defaults, right?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Make sure you add backticks around the option name (AV::...escape_whitelist).",
                    "beginOffset": 53
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "Wdyt about this:   Add ActionView::Template::Handlers::ERB.escape_whitelist, that contains a list of mime types w",
                    "beginOffset": 131
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "use named variables.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Ex.",
                    "beginOffset": 22
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "haml   = render issues, title: Unstarted Issues (open and unassigned), issues: @issues.opened.unassigned",
                    "beginOffset": 27
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "1.9 hash",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Please, use 1.9 hash syntax, thanks :)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": 0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "http://bfts.rubyforge.org/minitest/MiniTest/Assertions.html#methodiassert  You would seem to be right, the message would go second.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Instead of assigning current_time, couldnt you just keep s[:backup_created_at] as is and then just refer to that in the commands below?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Also it makes sense to return false unless Gitlab.config.ldap.enabled before ldap_auth call.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "It makes more sense then call ldap method and check for ldap enabled there",
                    "beginOffset": 94
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Are the values in @columns actually used as Hash keys?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "If not always, then this change is actually worse than without it because this code always allocates another copy of each string and then freezes it.",
                    "beginOffset": 55
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Basically, its paying constant upfront cost ins",
                    "beginOffset": 205
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@steveklabnik I dont plan on doing additional work on this patch.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "If that means you wont merge the patch due to style issues, thats fine with me.",
                    "beginOffset": 67
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Im not an ActiveRecord user, for obvious reasons.",
                    "beginOffset": 148
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "@evanphx most callers are going to call hash_rows, w",
                    "beginOffset": 199
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "use 1.9 hash syntax please",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "It was designed to work for all symlinking, not just homebrew.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "This way Basho can use it in their build process for other products.",
                    "beginOffset": 63
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "On Jul 13, 2013, at 9:50 AM, Adam Vandenberg \u003cnotifications@github.com wrote:   In Library/Formula/riak.rb:",
                    "beginOffset": 134
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "This is likely change the before_filter options hash, Id rather not delete the options but create a dup hash without the options here.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Use ruby 1.9 hash syntax please",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Here we could make decision based on admin status or authentication provider.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.8
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "brew audit packer, this version should not be needed",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.8,
                "score": -0.8
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "then dont you run the risk of people having an exposed default password?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@AlexDenisov, I understand your confusion as to why the first to declare, and then clean up.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Ask penetrate our experience and understand that whitelisting is always better blacklists.",
                    "beginOffset": 95
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "If we say that everything is permitted that is not forbidden, w",
                    "beginOffset": 188
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Lets go with ensure_confirmation_token!",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "because thats [the API we use in token authenticatable](https://github.com/plataformatec/devise/blob/master/lib/devise/models/token_authenticatable.rb#L63).",
                    "beginOffset": 40
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Also, we can change [this line](https://github.com/",
                    "beginOffset": 198
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Hm, where are coderay options used in kramdown?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "http://kramdown.rubyforge.org/options.html",
                    "beginOffset": 48
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Hm, where are coderay options used in kramdown?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": ":question: Kramdown wants the coderay options directly in its option hash (with symbol keys, of course), but jekyll seems to have historically chosen to have them in a nested coderay hash in _config.",
                    "beginOffset": 49
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I think that better that this hack is initialize the variables in the initialize method",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": 0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@lucasmazza This proposed API is a little bit weird.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "ruby parameters_sanitizer.permit(:sessions, :pin, :foo, :bar)   Is :sessions a parameter or the name of controller?",
                    "beginOffset": 54
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Maybe  ruby parameters_sanitizer_for(:sessions).permit(:pin, :",
                    "beginOffset": 171
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "As said by @rafaelfranca earlier, I also think that the API would be clearer like this:  ruby sanitizer_for(:confirmations).permit(:other)  instead of ruby sanitizer.permit(:confirmations, :other)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": ":current_password",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Concurrent::Cache#fetch is slightly different from Hash#fetch and behaves similar to AS::Cache::Store#fetch: it stores the return value of the block, so the []= call at the end is unnecessary.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "ah, forgot password mail couldnt send, but reading it via postcat q I can see the proper RAILS_RELATIVE_URL_ROOT is there.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Instead of duplicating warden logic, maybe the test could simply call warden.authenticate!() in MyControllers before filter passing the strategy?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "You can do this in one action:  ruby args += [withssl, ...",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Although the implementation is different, it would be convenient if the signature for compare is the same (we can simply ignore the salt).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Also, please add information to this BCrypt class saying it is special because the salt is actually bundled with the",
                    "beginOffset": 139
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I agree  the existing email thing is very tricky.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "Its in database_authenticatable aleady and will blow up as it stands currently if the existing model has that field (as many will, I suspect).",
                    "beginOffset": 51
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "I had thought to possibly handle that by detecting the e",
                    "beginOffset": 195
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "My first version was more explicitly.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "But in only sqlite testcase, we need to pass Rails.root ...",
                    "beginOffset": 38
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "What do you think about the following signature ?",
                    "beginOffset": 99
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "ruby def structure_dump(configuration, filename, root = Rails.root)",
                    "beginOffset": 151
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Homebrew does not write dotfiles into the users Home.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "People trust us with that.",
                    "beginOffset": 54
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "We can however print a caveat with the stuff that should go in there.",
                    "beginOffset": 81
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I like the idea of easy to read code.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "How about this?      if token.present?",
                    "beginOffset": 38
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "&& protect_against_forgery?",
                    "beginOffset": 77
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "if token && protect_against_forgery?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "is fine.",
                    "beginOffset": 37
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "remove this method.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "It is no longer needed and brew audit newt should complain.",
                    "beginOffset": 20
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I prefer   options.is_a?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Hash   over   Hash === options   would also maybe change options[:method] = options[:method].blank?",
                    "beginOffset": 25
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "to protect against anyone using an empty string",
                    "beginOffset": 125
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": 0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "When I ran the test suite, there were only references to :lock, so I could update the commit.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "However, I dont know if the method is receiving a hash with indifferent access.",
                    "beginOffset": 95
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "As far as I could tell the only options passed in are :lock = \u003cboolean,",
                    "beginOffset": 176
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Can we create a private method to do this?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Something like this:  ruby def merge_hash(target, base)   base.keys.each do |k|     sym = k.to_sym     target[sym] = base[k] unless target.has_key?(sym)   end    target end   and call it like this:  rub",
                    "beginOffset": 44
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I forget about this =/",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "@carlosantoniodasilva I wouldnt mention Cookies here since you can use them in API requests",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": 0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@spastorino yeah, you can use them, but the middleware is not enabled by default, I tried to explain that saying you can add them to the stack manually if you want.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Perhaps we could expand this a bit with something like:   Although Cookies could be use",
                    "beginOffset": 165
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "We should also consider making the last argument an options hash instead of adding new args.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Thanks for the advice.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            },
            {
                "text": {
                    "content": "Changed it to an options hash.",
                    "beginOffset": 24
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Ill remove the two depends_on lines.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "I did run brew_audit on this formula without a problem.",
                    "beginOffset": 38
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            },
            {
                "text": {
                    "content": "Should I declare fortran support using the ENV.fortran line in the install instead?",
                    "beginOffset": 95
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Oh right, audit wouldnt complain because the depends_on gfortran isnt executed unless you pass withfortran.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "But yeah, we dont depend on it directly, use ENV.fortran if build.with?",
                    "beginOffset": 108
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "fortran",
                    "beginOffset": 180
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This method is trying to be too clever IMO.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "I prefer the existing version that is more explicit, but with your refactoring of certain values in the hash to methods.",
                    "beginOffset": 44
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I havent looked at this code before, but I would say that the original implementation was rife with duplication.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "It also used unnecessary calls on the explicit receiver (self).",
                    "beginOffset": 113
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Maybe Im strange, but the little method that generates the Hash in the",
                    "beginOffset": 180
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Id rather use Configuration to build the configuration settings.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "It inherits from hash, so it should be fine.",
                    "beginOffset": 65
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I can read this, but Im sure others will find it difficult.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Would you mind expanding this hash syntax out?",
                    "beginOffset": 60
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "All sanitizers should have the same API in case someone decides to inherit from them to implement their own.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Currently @choices can be a string, array or hash, so it breaks if we force it into an array.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Im happy to refactor the render method, which imho isnt particularly readable atm, but I think the original oneliner is a good interim solution for thos",
                    "beginOffset": 94
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Multibyte::Chars is designed to work with UTF8.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Some references: https://github.com/rails/rails/blob/master/activesupport/lib/active_support/multibyte/chars.rb#L7 https://github.com/rails/rails/blob/master/activesupport/lib/active_support/multibyte/char",
                    "beginOffset": 49
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Maybe each of these could be split into separate descriptive methods and put together to achieve the sanitized URL?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "String sanitation is a notoriously ugly process and maybe breaking things out into separate private methods could aid in elucidating the pr",
                    "beginOffset": 116
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Itd be good to also add a test where the hash contains more keys than the required ones, and it should not raise.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Can you remove the !!, and dont mutate the options hash thats passed in?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "What would we be the best way to do this?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "I want to keep as much of the inheritance/template reuse as possible, so we dont have to duplicate so much functionality.",
                    "beginOffset": 42
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "Thats why I did it this way, but I agree that its hacky.",
                    "beginOffset": 164
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "Do you know a better way?",
                    "beginOffset": 221
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Done, tests pass without the whitelist now",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Cache the objects here: ruby @consumer ||= OAuth::Consumer.new(consumer_key, consumer_secret, :site = http:// @access ||= OAuth::AccessToken.new(@consumer, access_token, access_secret)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "No need to assign to a local variable if all you do is returning it.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "Just write the hash as the last expression of the method.",
                    "beginOffset": 69
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "So this if user_signed_in should be on the tag page.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Ill move it.",
                    "beginOffset": 53
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I try delete it there but message: You must be signed in and on a branch to make or propose changes",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Lets not mix hash forms in one line:  ruby html: {class: new_conv_bla}, remote: true",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": 0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Oh yes, I just realized there was more potential for shortening! :D",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "ruby def gh_token   gh_token ||= (pn = Pathname.new(~/.brew).expand_path).file? ?",
                    "beginOffset": 68
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "MultiJson.decode(pn.read)[token] :  end  Beautiful!",
                    "beginOffset": 150
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Hide comment button in the mobile view when not signed in? :)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": 0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.8,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Oh, I didnt realize!",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Should have checked the audit.",
                    "beginOffset": 21
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Ive removed the version string.",
                    "beginOffset": 52
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 2,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "it would look nicer if we add a cancel button.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "That would require not requiring email, password and username.",
                    "beginOffset": 47
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "we could flash the notifications.",
                    "beginOffset": 110
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Now the user just sees an X and not why its wrong.",
                    "beginOffset": 144
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "That could be changed while at it.",
                    "beginOffset": 195
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Adding a confirmatio",
                    "beginOffset": 230
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@mojombo Mostly worried about someone hacking this through a security vulnerability in Regexp in the version of Ruby that GitHub Pages uses to run jekyll on sites you host.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Id rather be safe than sorry, so I just wanted to check!",
                    "beginOffset": 173
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I agree it would be better assigned to an ivar on a separate line, but I dont find it so offensive that I think its worth deviating given I already applied to master.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Please write the exact method signature, e.g.   ruby def first_or_create(attributes = nil, options = {}, &block)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "ruby args = [] args += [just, another, list] # or for single item args \u003c\u003c spam",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "No need to explicitly return nil on methods marked as Returns nothing..",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Just let it return whatever the last statement returns, the docs tell people not to trust the contents of the returned value for anything.",
                    "beginOffset": 72
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Same as with the collection, only that I know that here the photos model does the fetching and assigning and this photo model just represents a single instance",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.9,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yup, adding such a call to debug_param_given?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "is preferable.",
                    "beginOffset": 46
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "rescue blocks should be reserved for catching exceptional conditions, not as part of the standard application flow.",
                    "beginOffset": 61
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "But using respond_to?",
                    "beginOffset": 178
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "here feels like a hack.",
                    "beginOffset": 200
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Ill look at refactoring",
                    "beginOffset": 224
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "We cannot use as_json here, since serializable_hash is used for both json and xml.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "You should probably be overriding serializable_hash instead, which is intended for that.",
                    "beginOffset": 83
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Why not a use a hash in the test?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Do you mind adding another comment before this line saying something like JRuby will returns the value before typecast as integer or something like that?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "I think we might forget why this condition has to be exists at later date.",
                    "beginOffset": 154
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "We dont accept md5 hashes anymore as forgeries are too easy to create.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Use sha1 hashes instead.",
                    "beginOffset": 71
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "When removing last empty line, brew audit tells me * File should end with a newline",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Dont move head around, the preferred layout is homepage, url, (version), sha1, newline, head, newline, devel block.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Remove the 1.7.1 version here, Homebrew can parse that one fine, and it triggers an audit warning otherwise.",
                    "beginOffset": 117
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Need to update the checksum!",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Not a fan of the duplication here, can we fix what you dont trust about the existing code instead?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Suggest this be called :head or something, we eventually might want to record the formulas blob hash as well, useful for saying hey, the formula you used to build this is different from what we were shipping at [head revision].",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "md5 75a1720be83b1d787ba465e6bdabcf42",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": 0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "This is not a stable download, formula must define a stable, versioned download (with a checksum!) in order to be considered for inclusion in core.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "We remove /download from sourceforge URLs (brew audit will warn about this).",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This can be done as a subformula instead, so that it will be protected by a checksum.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "See e.g. the git formula for how this is done.",
                    "beginOffset": 86
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Hmmm, I just downloaded it on my desktop and sha1sum says your checksum.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "But https://github.com/rapid7/metasploitframework/wiki/DownloadsbyVersion shows the b9d6dbe54b23448da9a939cf3e1f95cb7dc0e363.",
                    "beginOffset": 74
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Though the download link for *that* file is http://",
                    "beginOffset": 201
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Need to update the checksum as well!",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "The line between md5 and head should remain.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Hmm ... but on the second though, I think Ill make the copy.avatar to have a @file assigned to it first, and assert that copy.avatar.file?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Then, Id assign original.avatar to it, and assert !copy.avatar.file?",
                    "beginOffset": 139
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I considered it, but currently s3 only offers one encryption option so a bool was enough to get it done.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "However I can see them adding other options in the future in which case passing a symbol that indicates type could make sense.",
                    "beginOffset": 106
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "Lately Ive been tryi",
                    "beginOffset": 234
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Good point:  given that awssdk takes a type, paperclip should take a type.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "[65e0338](https://github.com/Sporky023/paperclip/commit/65e0338f3ed07ddf95958ce71265a0ba76e9c1c6) changes the format to:     :s3_server_side_encryption = :aes256",
                    "beginOffset": 76
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "depends_on should come after the checksum and a blank line, i.e.  rb homepage ...",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "url ...",
                    "beginOffset": 82
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "md5 ...  depends_on ...",
                    "beginOffset": 90
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "depends_on ...",
                    "beginOffset": 114
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "It will compile with a wanky patch to disable code signing.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "It actually works but I cant guarantee that I will maintain this patch or that it will work with HEAD.",
                    "beginOffset": 60
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Can omit the checksum when the stable URL is a git checkout.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Dont override brew.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "The best way to sniff for installed formula is to do Formula.factory(mysql).installed?, and it should be done in install.",
                    "beginOffset": 21
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "By convention, depends_on goes after the url, homepage, and checksum, and there is a blank line in between, i.e.  ruby url ...",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "md5 ... homepage ...",
                    "beginOffset": 127
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "depends_on foo",
                    "beginOffset": 149
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Remove the commented out cmake stuff here and below (or more generally, brew audit this).",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "But even without space reuse this is wrong because theres space on both sides.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "The naive algorithm would be images.inject(0) {|sum, img| sum + img.width + 2 * img.spacing}.",
                    "beginOffset": 79
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Also, do we need spacing on the edges?",
                    "beginOffset": 173
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "I dont think so.",
                    "beginOffset": 212
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Well, no.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "The forward slashes are creating the problems, theyre supposed to be hashes.",
                    "beginOffset": 10
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Or do you mean the names?",
                    "beginOffset": 87
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Thats the checksum gnomedevelopers have posted on their site with their tars.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Its better using gnomes checksums than creating my own i believe...",
                    "beginOffset": 78
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "We dont allow depends_on python because we allow nonHomebrew python installations.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "The normal approach is to sniff for the python in the path and take the appropriate steps.",
                    "beginOffset": 83
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Updated, audited and tested locally.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Pushed the change.",
                    "beginOffset": 37
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Stable URLs cant point at the master tarball, as that is liable to change at any time, breaking the checksum.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "(Also, dont use nodeload, just https://github.com/facebook/...)",
                    "beginOffset": 110
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "It does: Endianess is Netty (and in Java generally) is handled by the underlying ChannelBuffer.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "So to do this â€œproperlyâ€   you could either demand a little endian ChannelBuffer factory, or override the LengthFieldBasedFrameDecoder and wrap the incomin",
                    "beginOffset": 96
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Youll need to save the reader index here so that it is restored next time.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "See the [FrameDecoder example](http://docs.jboss.org/netty/3.1/api/org/jboss/netty/handler/codec/frame/FrameDecoder.html)",
                    "beginOffset": 75
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "As in, a rogue library that has a malicious toString method?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "We can completely remove it but the problem of sql injection is still there if the a user builds their own sql statement.",
                    "beginOffset": 62
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I read the spec wrong.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "This of course managed to work because I havent dealt with string lengths that dont fit into a unsigned byte.",
                    "beginOffset": 23
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Ill fix it to use the length coded binary.",
                    "beginOffset": 133
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I need to find a better way to represent corrupt data.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "From what I understand, it isnt idiomatic to throw exceptions that are not future encoded within Finagle.",
                    "beginOffset": 55
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Ive implemented your suggestions.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "Removing the noise caused by wrapping the sets in Option[...] and not passing around the decoder in the Defragging class cleaned up the code a lot.",
                    "beginOffset": 34
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "The changes actually reduced the amount of cases by 1, but I think it d",
                    "beginOffset": 183
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 2,
            "score": 0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "very nice.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "FOR LATER: i think we could improve this a bit further by embedding expectOK and defragDecoder into the state as well, but letâ€™s leave it asis for now.",
                    "beginOffset": 11
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "(I find it much easier to understand than the previous version)",
                    "beginOffset": 171
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Dont forget about this.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Note that this wont work.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Homebrew formulae __must always__ define url, md5 and version.",
                    "beginOffset": 26
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Throwing an error or calling exit outside of the install block has the potential to hose the entire brew installation because it can trip up any command th",
                    "beginOffset": 89
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "FYI, Homebrew will autodetect simple version numbers from the URL.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "brew audit strict FORMULA will warn you of that.",
                    "beginOffset": 68
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "(in other words, my mind is melted down and I trust my basic arithmetic skills even less than before)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": 0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Interesting: never trust _anything_ â€¦ (okay, Akka team excluded ,) )",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Fully agree on this.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            },
            {
                "text": {
                    "content": "I anyway planned to implement that as it is needed for an audit log.",
                    "beginOffset": 21
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "this might want to use the new aroundReceive which is being discussed in the context of akkapersistence, we should either await that before going forward with this or create a ticket so we donâ€™t forget.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "this is not true: leaving is needed in order to reliably remove the entry from the membership list, and I think we should persist that hardearned knowledge here so that we donâ€™t forget it.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "It would have been nice if we could still verify the credentials before building.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "There doesnt seem to be a target for that in the plugin though.",
                    "beginOffset": 82
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Maybe pushing a small dummy file?",
                    "beginOffset": 146
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "(Now in the right place in the script)",
                    "beginOffset": 181
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": 0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Dont use use_mirror for sourceforge URLs, we like the automatic mirror selection.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "why allocate a new String instance?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "def apply(name: String): Node = hash(name)      def fromHash(hash: String): Node = hash",
                    "beginOffset": 41
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yes, just like about every other object we create, why are you so worried about this?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "If someone leaks Akkaâ€™s objects then theyâ€™ll leak Akkaâ€™s objects.",
                    "beginOffset": 86
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Every ActorCell links to its parent â€¦ Iâ€™d much rather remove those ugly hacks and not muck with final f",
                    "beginOffset": 173
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": 0.8
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "love that one!",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "I also like this one: find + map = collectFirst   On Thu, May 30, 2013 at 1:07 PM, Patrik Nordwall \u003cnotifications@github.comwrote:   In project/Publish.scala:    @@ 102,6 +103,11 @@ object Publish {      def akkaCredentials",
                    "beginOffset": 15
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "ah, forget it",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Its a ConcurrentHashMap right?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "violated, mutilated, maimed, â€¦",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "oh, forget it, my bad, maybe add a comment?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "so, actually: TreeSet has an overhead of 32b per entry (one tree node), whereas immutable.HashSet occupies 41b (on average at 1000000 entries, same result for 1000 entries)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "OTOH you made me thinking about if that is really a good idea to add the terminator in the encode step.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "It should be either a separate option, or just up to the user completely.",
                    "beginOffset": 104
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": 0.9
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I trust you, you trust the spray.io guys who trust the Netty guys :)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.9,
                "score": 0.9
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yes, exactly.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "The Send class here is intentionally mutable (through the ByteBuffer), because we want to work with a single instance until its buffer has been encrypted completely (which might take several encrypt calls, each of which drains a chunk of",
                    "beginOffset": 14
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "One thing that we can be sure of is: large writes will always be broken down and encrypted in several passes.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "From the SslBufferPool sizing question above we know that there is a max number of output bytes the SSLEngine will generate with a single wrap",
                    "beginOffset": 110
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yes.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "Thinking about it again the best approach might be to remove the Send and, in the encrypt method, copy only the next maxBufferSize bytes from the write ByteString into a ByteBuffer from the pool and have the SSLEngine wrap these bytes into an",
                    "beginOffset": 5
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "no equals and hashCode for this one?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "why not case class?",
                    "beginOffset": 37
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "just forget it, I missed gatedidle",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "What do you mean by that?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "I mean the order is not violated as far as I see, only there are holes.",
                    "beginOffset": 26
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I need to correct myself: since the result of nextSeq() always goes into a Some() boxing will happen immediately anyway, an optimization would be to encode the optionality of a SeqNo by reserving Long.MinValue as undefined.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "so if this is violated we leak a buffer?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "topic should be any String, right?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "In this case it must be URLencoded further below",
                    "beginOffset": 35
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 2.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "That was part of my uid pull request.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "https://github.com/akka/akka/pull/1244 I changed such occurrences in akka code.",
                    "beginOffset": 38
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "For user code I have described the problem in the migration guide.",
                    "beginOffset": 118
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "It is not possible to fix.",
                    "beginOffset": 185
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Equals and hashCode cannot be based on wi",
                    "beginOffset": 212
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "is / allowed character in generated cookie?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Then it should be enclosed in quotes, otherwise config will barf.",
                    "beginOffset": 44
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Not sure that assigning of null will help GC to collect node faster.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Possible need to ask GC experts (like Gil Tene) to weigh all procs and cons.",
                    "beginOffset": 69
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "no, catchignore try trustStore.load(fin, pwd) finally Try(fin.close())",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I checked if this was documented at some other place, and found that all ssl settings have been removed from reference.conf.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "That must be wrong.",
                    "beginOffset": 125
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": -0.9
                }
            },
            {
                "text": {
                    "content": "Ill create a separate ticket for that.",
                    "beginOffset": 145
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yes, Patrik, you are of course right.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "I shouldnâ€™t trust my reviews today, thanks a lot for catching this!",
                    "beginOffset": 38
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Also, assigning vars inside a transformation?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This change doesnt appear to reflect the reality of whats available for download from sourceforge.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Something a bit odd appears to be going on",
                    "beginOffset": 99
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Dont use the use_mirror part of Sourceforge URLs, that way we can let it detect the best mirror on its own.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This should be probably in some trait instead.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "One responsibility is getting the capacity values, while another one is assigning weights.",
                    "beginOffset": 47
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "WDYT?",
                    "beginOffset": 138
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "the better question would be where RichInt can actually come from?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Is this not a little overdesigned?",
                    "beginOffset": 67
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This is the old remoting, which should go away.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "This was just a short hack   to make things work.",
                    "beginOffset": 48
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yes, it should be properly encapsulated.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "The way it is defined with   protobuf now will eagerly deserialize the payload part  which violates   the layering.",
                    "beginOffset": 41
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "I will change the protobuf definition after I removed the   old remoting.",
                    "beginOffset": 157
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Inconsistent naming Ssl vs. SSL",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "please replace this (i.e. the whole listing) with      .. includecode:: code/docs/pattern/JavaAsk.java",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "yes, since consistenthashing isnt in master yet, so I will change once it is",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Could be encoded with Option[Either[LeaderChanged, LeaderChanged]] and remove a var (since I assume they cant be both Some at the same time?)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "decodePdu should be lazy wrt.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "decoding the actual payload, since we might throw it away in untrustedMode (it might be a mem bomb â€¦)",
                    "beginOffset": 30
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I think these would benefit from something like      def ape[T](msg: String)(thunk: = T): T  which is used like      ape(Error while decoding incoming Akka PDU) (codec.decodePdu(pdu, provider))",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Why not just a one liner: ring.rangeImpl(Some(hash), None).headOption.getOrElse(ring.head)._2 ?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Why cant you do:      case class ConsistentHashableEnvelope(message: Any, hash: Any)  Same as we do in Broadcast(..).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Seems tedious to have to define an envelope for each new message you want to hash.",
                    "beginOffset": 119
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Isnt there a MurmurHash in Scala libs?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "In the nightlies there is a scala.util.hashing.MurmurHash3.",
                    "beginOffset": 39
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Is ours customized somehow?",
                    "beginOffset": 99
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Isnt removing and adding via : and :+? They only call nodeHashFor and not nodeFor",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "since always one drives the other you could also make a nonblocking implementation (CASloop for updating the routees and the winner sets the hash)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": 0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "true, that would avoid subsequent equals checks.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Like this?        if (currentRoutees ne consistentHashRoutees) {         if (currentRoutees == consistentHashRoutees) {           // other instance, same content, no need to rehash           consistentHash",
                    "beginOffset": 49
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "yup, could keep them together in a Tuple2 also  This has the down side that several competing threads would do the same hashing work, this is on the sender side so its probably not usual to have many threads using the same actorRef  I think it would be p",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Locking always writes, lockless will almost always read, hence less cache line bouncing (Iâ€™d assume).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "When you see a discrepancy between the two lists of routees, try to fix that (and only that), and if you were the successful one, update the hasher, if",
                    "beginOffset": 109
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "How important is it that we see the updates and that they are in synch (consistentHashRoutees and consistentHash match up?)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "If they need to be in sync, then put them into a Tuple in an Atomic, and get them in the beginning, and if discrepancy between rou",
                    "beginOffset": 125
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think that this is a performance optimization.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "Maybe Im missing something but dont you insert the node with the hashFor as key in the TreeMap during :+?",
                    "beginOffset": 49
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "And calling getOrElse seems much less expensive than rangeImpl.",
                    "beginOffset": 155
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Instinct: Im not sure this is the best option.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "It means that you need to control message implementations to be able to use them for consistent hashing.",
                    "beginOffset": 47
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Same issue as with putting equals, hashCode etc in Object.",
                    "beginOffset": 152
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "I propose to seed the Router with either a",
                    "beginOffset": 211
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Previous comment was as an alternative to rangeImpl, if that wasnt obvious.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "/Patrik  13 sep 2012 kl. 15:14 skrev BjÃ¶rn Antonsson \u003cnotifications@github.com:   In akkaactor/src/main/scala/akka/routing/ConsistentHash.scala:        }",
                    "beginOffset": 77
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Possible to remove a bit of duplication:      if (currentRoutees ne consistentHashRoutees) {         val rehash = consistentHashRoutees != currentRoutees         consistentHashRoutees = currentRoutees         if (rehash)           consistentHash = Consist",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Arent we just interested in the first match with hash = the message hash for less than 100 nodes?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "ring.find({case (h, n) = h = hash }).getOrElse(ring.head)",
                    "beginOffset": 100
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "yes, it might be better, but remember that consistent hashing will always be used with remote routees, so we are not spending time on the bottleneck.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "If we think it is important I can take a stab at it, or I can create a separate performance ticket.",
                    "beginOffset": 150
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.6,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think they should be the other way around.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Its the consistentHash that should be in the atomic since you dont want to overwrite it with a stale consistentHash.",
                    "beginOffset": 45
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Overwriting the consistentHashRoutees with stale values will just trigger a new updat",
                    "beginOffset": 162
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yes, Tuple please.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Just realized that there is a race when removing nodes otherwise, that could make you get a removed node from the consistentHash.",
                    "beginOffset": 20
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "adding @volatile does not make it racefree without using CAS loops, Id recommend a normal ConcurrentHashMap or similar",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "If I didnt miss anything, then the getInstance pattern should hold for all singletons, including Kill, GetRoutees, and some others Im currently forgetting.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Differences between docs and code will then have to be settled by changing the code ,)",
                    "beginOffset": 156
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "ah, wasnt that because of the special optimization that is done when type is not specified for final val.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "would be awesome with a comment about.",
                    "beginOffset": 106
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            },
            {
                "text": {
                    "content": "I forget it all the time.",
                    "beginOffset": 145
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "yes, that contains strictly more information.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "Id like to use FiniteDuration more in method signatures which expect finite durations â€¦",
                    "beginOffset": 46
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 3.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yeah Im not happy with this consumer config in general.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "It just doesnt feel right.",
                    "beginOffset": 56
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Should delegate of course, hacked together too quickly.",
                    "beginOffset": 83
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "It is used for default settings.",
                    "beginOffset": 139
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "But it is not correct.",
                    "beginOffset": 172
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "the consumerconfig is now also used when you have a produc",
                    "beginOffset": 195
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "you think about that the values are VectorClock and that is expensive?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "or is it the size operator you think about?",
                    "beginOffset": 71
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "I have an idea that the seen table doesnt have to contain the full VectorClock values, but only a hash of them (less to transfer, faster t",
                    "beginOffset": 116
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.6,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Good point.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "Leave it as is and put a FIXME to change it to URLEncode when http://www.assembla.com/spaces/akka/tickets/2123 is fixed",
                    "beginOffset": 12
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yep :)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "Sent from my iPhone  On Jul 12, 2012, at 2:05 PM, Viktor Klang (âˆš)\u003creply@reply.github.com wrote:   +  +.. includecode:: code/docs/camel/Introduction.scala#CamelActivation  +  +The above code shows that you can get a Future to",
                    "beginOffset": 8
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Some day someone will either add some code in there or refactor it to be a method call instead...",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Putting tryfainally is just a very cheap way to ensure structural integrity and harmonize the way locks are handled.",
                    "beginOffset": 98
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "It would also make me sleep better :)",
                    "beginOffset": 215
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "trust me, we will not miss that :)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "I can sprinkle FIXME if that makes you sleep better, but I wouldnt trust the fixmes when doing the ticket anyway",
                    "beginOffset": 35
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Ive played with the proxy class loader idea but it doesnt quite work (I suspect ObjectInputStream).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "The main difference is that with the Java Hack the code operates directly with the targeted class loader i.e.",
                    "beginOffset": 101
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Remote or Original.",
                    "beginOffset": 211
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "But with the Proxy it",
                    "beginOffset": 231
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Id need to jarjar them in any case.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "If no extra dependencies are needed can this stay here or do you think extra module is right in any case?",
                    "beginOffset": 37
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Ill get rid of them.",
                    "beginOffset": 144
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "From Guava I am using LoadingCache but that can be done with locks and HashMap (same as",
                    "beginOffset": 165
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.8,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "That you can not use a BalancingDispatcher with *any* kind of Router.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Now that yields a ConfigurationException.",
                    "beginOffset": 71
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "So that violates this whole section of the docs.",
                    "beginOffset": 114
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "On 2012/05/25 07:49 AM, patriknw wrote:  @@ 151,6 +151,33 @@ akka {            # (O) Maximum time window that a client should try to reconnect for         reconnectiontimewindow = 600s  +  +      # (I&O) Enable SSL/TLS encryption.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "+",
                    "beginOffset": 232
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "On 2012/06/07 10:55 AM, patriknw wrote:  +  +        # (I&O) Protocol to use for SSL encryption, choose from:  +        # Java 6 & 7:  +        #   SSLv3, TLSv1  +        # Java 7:  +        #   TLSv1.1, TLSv1.2  +        protocol =",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "sorry, forget what I said, *braces* can be removed",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "FWIW, this implementation of InputStream.read is incorrect.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Read should return the unsigned equivalent (0255), or 1 in the case no byte is available.",
                    "beginOffset": 60
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "See http://stackoverflow.com/questions/4332264/wrappingabytebufferwithaninputstream/6603018#660301",
                    "beginOffset": 150
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Could we switch to Scala Libs MurmurHash or Phils new hash?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "It has to be removed in order to allow adding () to the other apply method: def apply[T \u003c: Actor: ClassManifest](): Props Else both have the same signature after erasure.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Great stuff, after these last tweaks I think its ready to go in.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "Have youve signed the cla?",
                    "beginOffset": 66
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "(Will be needed before I can merge it in: http://www.typesafe.com/contribute/cla)  Cheers, âˆš",
                    "beginOffset": 93
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "moved into encoders/decoders",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "This should be encoded in the Open state and not in the breaker itself.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "If theres a good place to look for examples here, that would be helpful to me.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "Im thinking youre looking for a signature along the lines of:  scala  def onOpen(func: () = Unit)  // or  def onOpen[T](func: () = T)",
                    "beginOffset": 80
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "this should be in finally block as it was before, because handleSupervisorFailing is not trusted code (potentially)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "val NATFirewallAddresses = getStringList(akka.remote.natfirewalladdresses).asScala.toSet",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Ouch, undocumented behavior that an empty whitelist makes ALL unknown addresses whitelisted, surprising behavior.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I guess there will be some functionality coming later which uses this, right?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Anyway, donâ€™t forget to null out the ref once done.",
                    "beginOffset": 78
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": 0.7
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "also, always have return types on your methods.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            },
            {
                "text": {
                    "content": "Trust me, will save everyone involved a lot of headache and will add documentation.",
                    "beginOffset": 48
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Can such a scenario exist such that both connection and reconnectionFuture is Some(...) ?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "If not, you might want to encode it as Option[Either[Connection, Cancellable]]",
                    "beginOffset": 90
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "donâ€™t use Any in Javafacing signatures, Paul warned that there is pain lurking on that path",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Because I needed a specific apply method to create the Node instance.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Same signature as the generated one but different impl:     def apply(name: String): Node = new Node(hash(name))",
                    "beginOffset": 70
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "What exactly (and I mean really the details) is the test meant to ensure?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "The current implementation of the test fails if any resize() call does not lead to an actual Resize event, which is definitely flawed.",
                    "beginOffset": 74
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "And hacking it so that the test works (by doin",
                    "beginOffset": 209
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I understand that, but what about DynamicAccess or DynamicClassMaster.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Looking at the signatures it is all about fqcn strings.",
                    "beginOffset": 71
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "PropertyMaster can be a manager that handles just about anything.",
                    "beginOffset": 128
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Who do you handle capacity violations?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "(In case of bounded Deque)",
                    "beginOffset": 39
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Calling unstashAll() now throws a MessageQueueAppendFailedException in case of a capacity violation (this is also properly documented now).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Moreover, the stash size limit is now configurable using stashcapacity (an int in the dispatcher section of",
                    "beginOffset": 140
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This way you encode a default value directly.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            },
            {
                "text": {
                    "content": "We have made an effort to put all defaults into reference.conf to keep them central (and testable).",
                    "beginOffset": 46
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "val dispatcher = context.system.settings.config.getConfig(context.props.dispatcher)     val config = d",
                    "beginOffset": 151
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "all interfaces must be resolved recursively as well, so that doesnt work.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "My first approach was to try to get collectFirst working but I didnt find a good way, and it is really only some extra HashMap lookups that are performed (initially).",
                    "beginOffset": 75
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "I would be",
                    "beginOffset": 243
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "its documented on ActorPath, and its used for cheaply injecting the transport address into its string rep (for local Addresses)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Has Derek signed the CLA?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "So why is it a WeakHashMap if you already use the DeathWatch?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "If there are no references to it, it means that its been terminated, if it has been terminated then DeathWAtch has been triggered.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "No need for WeakHashMap",
                    "beginOffset": 131
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Ok  I take it.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Forgive my ignorance  whats wrong with starting children that way?",
                    "beginOffset": 15
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Is this violating the rule of not sending behaviour to an actor?",
                    "beginOffset": 82
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I think I prefer: import org.jboss.netty.akka.util.{ Timer, TimerTask, HashedWheelTimer, Timeout â‡’ HWTimeout }",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": 0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Moved from Sourceforge to https://github.com/swh/LRDF with a new release.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "Seems relatively active.",
                    "beginOffset": 74
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "On Wed, Dec 21, 2011 at 5:08 PM, viktorklang \u003c reply@reply.github.com  wrote:         // FIXME: Dispatchers registered here are are not removed, see ticket  #1494     private val dispatchers = new ConcurrentHashMap[String,  MessageDispatcher]",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "On Wed, Dec 21, 2011 at 5:24 PM, viktorklang \u003c reply@reply.github.com  wrote:         // FIXME: Dispatchers registered here are are not removed, see ticket  #1494     private val dispatchers = new ConcurrentHashMap[String,  MessageDispatcher]",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Just tried the actual generated docs.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "This example comes out a little strange because of the different indenting.",
                    "beginOffset": 38
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "I think as two blocks is better for this:      ..",
                    "beginOffset": 114
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "includecode:: code/TypedActorDocSpec.scala#typedactorsupercharge      ..",
                    "beginOffset": 164
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "includecode:: co",
                    "beginOffset": 237
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "WeakHashMap is bad for gc, but ticket is created #1494 I leave it with a FIXME refererence to that ticket.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "On Tue, Dec 13, 2011 at 2:32 PM, viktorklang \u003c reply@reply.github.com  wrote:    @@ 62,9 +69,30 @@ class Dispatchers(val settings: ActorSystem.",
                    "beginOffset": 108
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Im curious as to why the signature of ?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "still includes a timeout.",
                    "beginOffset": 40
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Since it returns a Future, which will no longer time out, isnt the timeout superfluous?",
                    "beginOffset": 66
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Trust me, I have spent quite some time pondering these issues.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "The ask/? we have for 2.0 is the least of all evils.",
                    "beginOffset": 63
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Dont need to interpolate prefix here (brew audit will catch that).",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "You guessed it.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": 0.5
                }
            },
            {
                "text": {
                    "content": "Also, use pbhash :)",
                    "beginOffset": 17
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "hashedWheelTimer.stop().asScala foreach execDirectly",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": 0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "On Mon, Dec 5, 2011 at 3:32 PM, viktorklang \u003c reply@reply.github.com  wrote:    @@ 459,7 +605,9 @@ class DefaultScheduler(hashedWheelTimer:  HashedWheelTimer, log: LoggingAdapter,            // Check if the receiver is still alive and kicking befor",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "If this is only used in one place for one usage Id rather just use ConcurrentHashMap and make sure that whatever gets put into it only has identity equality defined",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "But youre calling out to the methods of the Actor, which is a violation of the ActorModel, since the Actor could be shut down or its fields might be invisible from a JMM perspective, why not put the connect, bind etc as methods inside the selectfunctio",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Why does it require a HashSet?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "You can avoid using the HashSet with something like    ids.flatMap {     // return None if we dont want to include the id     // return Some(id) if we do   }.toSet",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Is it possible to use the Thrift isSetParent_id (or whatever it is called) here instead?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "As mentioned the id !=0 is fine as a hack, but if possible we should figure out the correct solution.",
                    "beginOffset": 89
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think a type alias that is used only once MultiHashMap is probably not that helpful.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Id just inline it so theres one less thing to lookup when one is reading the code.",
                    "beginOffset": 87
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "I think the same goes for the Responses alias.",
                    "beginOffset": 171
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "In particular I prefer to rea",
                    "beginOffset": 218
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yes, sounds good.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            },
            {
                "text": {
                    "content": "Ill file a bug for it, so that I dont forget it.",
                    "beginOffset": 18
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Done: https://issues.scalalang.org/browse/SI7624",
                    "beginOffset": 67
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yeah, its totally legal to end up in the null case.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "The question though is if we should change the signature to be a Function and then check if its partial and then applyOrElse and just straight apply if it isnt.",
                    "beginOffset": 52
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "(this would also be a nonissue with t",
                    "beginOffset": 213
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This is not just useful for hacking scalac, but is also consistent with Javas behavior.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "As SLS 4.7 hints,    The import clause import p._ is equivalent to import p.{_}, i.e. it makes available without qualification all members of p (this is analogo",
                    "beginOffset": 88
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "That name mangling is performed for compactness (as a result of hashCode.toHexString) but regarding the main question, I havent tried qualifying with currentClass.fullName only.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Ill think about it.",
                    "beginOffset": 178
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "A singleuse non implicit Ordering is an unlikely sweet spot.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "Skip the Ordering and write  sortBy (_.name.decoded)  instead of sorted treeOrd.",
                    "beginOffset": 61
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "What does the names are encoded mean to you?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": 0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Whichever way you slice it, it would be good to see unit tests for equals/hashCode consistency of this class, in addition to the functional tests like blameayetripleeee.scala.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": 0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "and you need the erasure to match the inherited implementation  Isnt that what bridge methods are for?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "The erased signature in the superclass can be more specific than the corresponding signature in the superclass.",
                    "beginOffset": 103
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "It is what bridge methods are for, we dont have enough bridges.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "The erased signature can only differ between the subclass and the implementing class if the backend will handle the calls and forwarding correctly, it is not a pretty picture when you get to",
                    "beginOffset": 64
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "It passes.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "But instead, I included a test that is divorved from the standard library (ie, it doesnt depend on the signature of Option#getOrElse).",
                    "beginOffset": 12
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "It was more convenient to test for an error due to failure to eliminate a tail call than to check for s",
                    "beginOffset": 147
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Small point for next time: Id prefer to this to use type local to this test case, rather than List[Int].",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Sure, the signature of List#map doesnt change all that often, but there is no need to couple this test to it.",
                    "beginOffset": 105
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Well, it looks like classfile annotations are pickled as well.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "class W extends scala.annotation.ClassfileAnnotation, @W trait X  Decompilation shows:   @ScalaSignature(bytes=006001M1q!001002021002G005QAA001Y025005031021a002037f[B$030",
                    "beginOffset": 64
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Because getMethods returns stuff like toString and getHashCode",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "This needs because FlatHashTable#iterator became protected",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "lobounds, why is it a list an not a Set (or LinkedHashSet if needing insertion ordering)?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "good point, you found a missing test case, your UPDATE is not enough, though, due to the 0d sickness it needs to use compare instead of \u003c.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "BTW: is Double (and Float?)",
                    "beginOffset": 140
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "the only example of a violation of the equals/compareTo contract on the JVM whic",
                    "beginOffset": 168
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I believe we should retain the Ordering evidence here.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "If we decide that we need to compare elements for some reason later during a minor release, we can then do so without changing the signature of this method.",
                    "beginOffset": 55
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Not being bound by the collections, Id rather this had the signature      final def contains[A1 : A](elem: A): Boolean  The difference is invisible at the user level but significant internally.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "With an Any parameter it wont infer anything, with a boun",
                    "beginOffset": 195
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "The problem previously in Wrappers was that the byteswaphash magic number constant in improve was missing a digit  the hash worked ok still, but with a lower chisquare for this testcase.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "When I refactored and fixed the missing digit, chisquare in",
                    "beginOffset": 187
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I was actually thinking it might be useful to also have a class corresponding to each hash function which is mutable and allows cumulative hashing, as is the case with the old MurmurHash.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Should this chain into another Hashing instance?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "I can see that being useful potentially.",
                    "beginOffset": 50
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Looks good.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "Mind if I add a CityHash implementation in here?",
                    "beginOffset": 13
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "It seems useful, yes.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            },
            {
                "text": {
                    "content": "Maybe we should have a separate class in that case which composes 2 Hashings together.",
                    "beginOffset": 22
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "No  pointers as far as I can see  the class is defined in a toplevel companion object:        Compiled from TrieMap.scala     public class scala.collection.concurrent.TrieMap extends java.lang.Object implements scala.util.hashin",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I agree this needs to be worked out.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "However, we currently have a request to use custom hashing on TrieMaps.",
                    "beginOffset": 37
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "I think we should at least enable the TrieMaps to take custom Hashing objects for now.",
                    "beginOffset": 109
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Given that we dont do this with the rest of the collection",
                    "beginOffset": 196
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 2.2,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "You have a point there, it would be good to get rid of this.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "However, the opposing constraint is that when there is no custom Hashing object, some objects produce poor hashcodes for typical object ranges  for example (n: Int).hashCode == n.",
                    "beginOffset": 62
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "The problem",
                    "beginOffset": 242
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Note:  MurmurHash  exists in scala.util.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "(a) Should we provide a default MurmurHash instance?",
                    "beginOffset": 43
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Its an instance of T = Int (b) Should we adapt MurmurHash to extends Hashing?",
                    "beginOffset": 97
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "(c) Given that we have two classes, should they both be in the sam",
                    "beginOffset": 175
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "What if we figure out if a default is provided?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "We can control the default typeclass, so lets give it a real class name and throw an isInstanceOf before mangling?",
                    "beginOffset": 50
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Either that or we can wrap the typeclass on the way *in* to the hash map if its an ins",
                    "beginOffset": 167
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "To avoid isInstanceOf on every computeHash, I could replace the hashingobj with a custom internal Hashing which does the mangling if its a class returned by Hashing.default, yes.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "These 2 methods in the await object can be refactored to a different signature if needed.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "Im not sure if the Awaitable trait should live in the Await object, but if you insist, it can also be done.",
                    "beginOffset": 91
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Youre not assigning something.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Just use ||.",
                    "beginOffset": 31
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "connectionHandler.expectMsgType[Received].data.decodeString(ASCII) must be(testdata)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "The only reason we add this new scheduler is that we want to replace the old DefaultScheduler (and akka.util.internal.HashedWheelTimer.java).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "The old has in practice not been part of the public api (even though visibility modifier and doc annotation of th",
                    "beginOffset": 142
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "The thing is that no hashing is involved in the new timer, hence itâ€™s more like a LamettaWheelTimer (with all those lists dangling from the spokes, Lametta is German, I think the English word for it is â€œtinselâ€  ).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "My idea would be to backport it to 2.1, b",
                    "beginOffset": 232
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "But FYI this is set up for trouble and you should probably revisit it.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Taking the memberType of the symbol owner means it will be wrong whenever the symbol is inherited.",
                    "beginOffset": 71
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "When the type signature is Symbol = TypeTree, the right thing cannot be done.",
                    "beginOffset": 170
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Thats essentially a blacklist approach, not sure if I like it.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Could use a third opinion here.",
                    "beginOffset": 63
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "that wouldnt work, cause it would return a symbol hash key, which is not a json primitive",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Lets be precise about what, exactly, was changed.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "1.",
                    "beginOffset": 50
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Object#as_json and Struct#as_json properly recurse through the hashes they return.",
                    "beginOffset": 53
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "2.",
                    "beginOffset": 136
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Circular references are correctly detected in deeplynested arrays and hashes. 3. ??",
                    "beginOffset": 139
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "The as_json method",
                    "beginOffset": 224
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Why did you pull the encode_json out of the block?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Perhaps this is out of as_json responsibility.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "If you wish to use circular reference detection, you should pass the encoder as an option (as the code was before, here).",
                    "beginOffset": 47
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "ruby if options && encoder = options[:encoder]   map { |v| encoder.check_for_circular_references(v) { v.as_json options }} else   map { |v| v.as_json options } end",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "here we have an utf8 string assign to a CStdStringW, are you sure it is assigned with the correct utf8 conversion?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Because the build system changed to require them since the last release (over a year ago) and while we could include them as general dependencies, they arent needed for the release version.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "When FontForge is next released, they will be needed as general",
                    "beginOffset": 190
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Without it, when I run   brew uninstall fontforge, brew install fontforge HEAD debug withx  then it fails.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "I press 5 to get a shell, and press up to get the previous command and rerun it, and this is what I get:   ./configure prefix=/",
                    "beginOffset": 107
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Here, you are not checking whether the rewriting key exists in the options.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "but the signature of all methods of the interface declares  as being an optional argument.",
                    "beginOffset": 76
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "This is not consistent.",
                    "beginOffset": 167
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Excuse me if Im missing something, but doesnt the []= method on Hash return its argument anyway, so that prev would in fact be set to the rightmost member?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "However, it seems to me that prev is not used for anything here, and could be removed.",
                    "beginOffset": 156
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Not sure what you mean here, if I remove those three functions, how does the class work ?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Im using the same methods used in DisplaySettings.cpp.",
                    "beginOffset": 90
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "OnSettingChanging might or might not be needed, this is POC not a finished PR that is ready to inject.",
                    "beginOffset": 145
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "I can",
                    "beginOffset": 248
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "yeah ... write only kind of regex.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "It looks for \u003cuser/repo/\u003cquery where query is optional and / is needed to encode the verbatim /.",
                    "beginOffset": 35
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "this is wrong.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": -0.9
                }
            },
            {
                "text": {
                    "content": "you should not talk about the service id but ask a csrf provider.",
                    "beginOffset": 15
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "the bridge is usable outside the full stack framework",
                    "beginOffset": 81
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "ruby # If Date bits were provided but blank, then return nil   Should be  ruby if missing_parameter = [1,2,3].detect{ |position| !values_hash_from_param.has_key?(position) }   raise ArgumentError.new(Missing Parameter  #{name}(#{missing_paramet",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Can clarify this with Hash#fetch:   seconds_to_advance = options.fetch(:seconds, 0) + 60*options.fetch(:minutes, 0) + 3600*options.fetch(:hours, 0)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "you should not change the signature of the protected method as this is a BC break.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Do the call to () in the calling method",
                    "beginOffset": 83
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "According to the output of brew audit dfc, this line should read      system make PREFIX=#{prefix} MANDIR=#{man} install",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "As mentioned in PR desc.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "according to the docs of Lighttpd, https is always first when request is encoded.",
                    "beginOffset": 25
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Instead of throwing a BadCredentialsException here (which means it has to be catched in the CurrentPasswordValidator to avoid getting a 500 error when applying the validator, which is not done currently), wouldnt it be better to return false in isPassw",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Would like to see this encoded as a Requirement at some point.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Would this work?:  ruby object.is_a?(Hash) && object.all?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "{ |k, v| k =~ /A?d+z/ && v.is_a?(Hash) }   Id also move this method below the each_element one, assuming its needed as an extracted method at all.",
                    "beginOffset": 58
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Are you sure of these Gameobjects IDs?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "I dont see them in sniffs, at least for map 469.",
                    "beginOffset": 39
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "i watched several videos on youtube and chose some gameobjects which have the same model, maybe you can give me several sniffs than i can do it correctly",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Thats what I have in sniffs which seems to be mostly the same spawns than @Foldor : sql SET @OGUID := XXX, DELETE FROM gameobject WHERE guid BETWEEN @OGUID+0 AND @OGUID+37, INSERT INTO gameobject (guid, id, map, spawnMask, phaseMask",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Why not?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "In some cases you will in fact know when the private keys were generated, even though you dont actually have them.",
                    "beginOffset": 9
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "For instance thats true for keys generated by the clientside Javascript in Coinpunk.",
                    "beginOffset": 124
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Why 80 bytes?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Thats significantly larger than a hash, yet still too small for a announcecommit sacrifice.",
                    "beginOffset": 14
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Nit: pass hash by reference.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "What tests are you actually using this for?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Its not much code to actually create a real stub certificate (depending on what fields you need)  having separate constructors for testing is nasty :/",
                    "beginOffset": 44
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I agree with @grumpydev here.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": 0.5
                }
            },
            {
                "text": {
                    "content": "There should be no ctor just for testing purposes.",
                    "beginOffset": 30
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "If its difficult / cumbersome to create a fake certificate then maybe we should provide some test helper for that instead.",
                    "beginOffset": 81
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "If the Ctor was already there then it mustve been",
                    "beginOffset": 204
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I though about that but I couldnt create a HashedWheelTimer from an Executor, and you cant pull the ThreadFactory out of the Executor.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Also people might be confused if one of the threads in their Executor is hijacked by the HashedWheelTime",
                    "beginOffset": 136
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yes.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "In the depths of the NioClientSocketChannelFactory it created a HashedWheelTimer with no arguments and that used java.util.concurrent.Executors.defaultThreadFactory",
                    "beginOffset": 5
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yes, @viktorklang We can probably reuse one HashedWheelTimer for the whole NettyTransport.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "So @drewhk correct me if Im wrong.",
                    "beginOffset": 92
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "This seems to be per outbound association.",
                    "beginOffset": 127
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Are we creating this for every connection to a new remote system?",
                    "beginOffset": 170
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "what is the advantage of this Base64 (which adds another dependency) over java.net.URLEncoder/ULRDecoder ?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.6,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Make it a git__memzero then and lets ship this.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "The idea of allocating SSH credentials even when SSH is not available sounds just reasonable to me.",
                    "beginOffset": 49
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "Specially since you can also check for SSH availability using the git_libgit2_features api call.",
                    "beginOffset": 149
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Why would the callback be null?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Should this not be verified for integrity?",
                    "beginOffset": 32
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I have the null setting when the next decode phase starts at the top.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Do you mean nulling it out immediately after the out.add() is called so if something happens in between it doesnt throw?",
                    "beginOffset": 70
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I cant recall where now, but I had found that method on some page or project source code.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "After some more research, it looks like theres a less hacky method available with sockaddr_ll.",
                    "beginOffset": 91
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I agree its a security issue waiting to happen in a future code change.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Id strongly prefer a different solution here, ie one where the password is set to empty in the testing code instead of bypassing the check.",
                    "beginOffset": 72
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "this needs a comment in ActorCell.newUid so that nobody gets crazy optimization ideas which then break hashing",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I hope i dont bother you.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "But you should add this to the imports as well.",
                    "beginOffset": 26
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "(I know this is NMS code but there is already a CraftBukkit import section so this wont cause any additional work and improves readability) Dont forget the DamageCause part.",
                    "beginOffset": 74
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@andrepl You talk about concern for how nms and the deobfuscation handles constants... this is why Bukkit conventions are to do minimal diffs so constant value changes are easily seen where they are done.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "There is no reason to embed the short1 variable un",
                    "beginOffset": 205
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Pretty toString(), hashCode(), and equals(...) please.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Maybe make this a subtype of DecoderException ?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Throw DecoderException",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think we shouldnt assume that the payloads are UTF8 strings.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Maybe it should rather be base64encoded?",
                    "beginOffset": 63
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Do you mean, they could be base64 encoded?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "If so, do you know how to figure out how they were encoded?",
                    "beginOffset": 43
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think BytesRef.toString is too verbose since it uses 4 chars per byte (0xc3 for example).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Maybe we could directly call currentPayloads[j] = Base64.encode(curPaypoad.bytes, curPaypoad.offset, curPaypoad.length)?",
                    "beginOffset": 92
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "uploadNewCredentials is not an operation that is currently supported by nimbus.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "We can put it back in as part of a future pull request.",
                    "beginOffset": 81
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "These can also be added back in when uploadCredentials has its own pull request",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I dont think we can take external code unless all contributors have signed the CLA.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "/cc @isaacs",
                    "beginOffset": 85
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Thanks a ton for taking this on, @domenic.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            },
            {
                "text": {
                    "content": "I just signed the CLA.",
                    "beginOffset": 44
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "I think Ive forgotten most things about the V8 API since I wrote Contextify a couple of years ago, but Ill check over the code and help any way I can.",
                    "beginOffset": 68
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "Ive accepted various pull reques",
                    "beginOffset": 220
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yep, thats correct.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "Just dont forget to declare a new HandleScope or the Local becomes rooted in the existing HandleScope (i.e. possibly leaks, possibly becomes unhinged if there is no HandleScope.)",
                    "beginOffset": 20
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think there is some drift between the comments and the current function signature (filename is not a current param...).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "I know this did not happen in this particular change, but maybe we should we clean this up?",
                    "beginOffset": 122
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "did you forget to remove this part?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "You can also use the official [code sniffer](https://github.com/cakephp/cakephpcodesniffer).",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": 0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.8,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "You need to put this to require as well because its required for the tokengenerator.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Without it the csrf component is not really useful.",
                    "beginOffset": 85
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Also you probably do not need ~2.4.",
                    "beginOffset": 137
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "I guess something like ~2.2 is enough (needs examination).",
                    "beginOffset": 173
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Furthermore, its miss",
                    "beginOffset": 232
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "true because its used in tests.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "also its missing suggestions for dependency injection, httpfoundation, templating and kernel for all the extensions.",
                    "beginOffset": 32
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Ive added this to requiredev and added suggestions for symfony/twigbridge and symfony/frameworkbundle.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "I did not add suggestions for dependency injection, HTTP templating or kernel, because the corresponding form extensions dont *add* functiona",
                    "beginOffset": 103
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Theres [240 more](http://bugs.jquery.com/query?status=assigned&status=closed&status=new&status=open&status=pending&status=reopened&type=feature&resolution=notabug&resolution=patchwelcome&resolution=plugin&resolution=wontfix&resolution=duplicate&col=id&co",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 2,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Why does injecting a script _require_ the ajax module?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "As for _: its a bogus inference that means nothing.",
                    "beginOffset": 58
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": -0.9
                }
            },
            {
                "text": {
                    "content": "jQuery UI uses it, jQuery uses it... but all it means is that we can close tickets as Wont Fix, because its not for user code to mess w",
                    "beginOffset": 110
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.8
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "You cant load a script using script tag injection synchronously.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.8,
                "score": -0.8
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "itostr() does strprintf(%d, n), which is for signed integers, so should we better use strprintf(%u, GetDefaultRPCPort()) instead, as we have an unsigned short as port number?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 2,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "My understanding is that this is well defined.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "The implicit type conversion is from unsigned short to signed int, which is always safe.",
                    "beginOffset": 48
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            },
            {
                "text": {
                    "content": "(Since the short is unsigned, there is no sign to extend.)",
                    "beginOffset": 138
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "The compiler doesnt even blink at this with Wall, but i",
                    "beginOffset": 198
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Alright Im fine with this patch then, but now Im interested in which lines give you that signed/unsigned warning, as we are always interested in finding and fixing these :).",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "No problem here, it is entirely correct: calling itostr casts the unsigned short to a signed integer (which is larger, so there is never undefined behavior), before feeding it into strprintf as a signed integer (%d).",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "hmm, thatâ€™s a tough one: I cannot really write that class in Java for real, and writing a Java copy runs the risk of bitrotting, as would documenting the method signatures translated to Java.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Wait a second, I have an idea!",
                    "beginOffset": 200
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": 0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "It is only a security risk when used with TLS/SSL, so maybe this could be:  Note that GZipMiddleware is considered a security risk on sites that use HTTPS",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Fair point, how about:  Note that using GZipMiddleware allows attacks that would nullify the security provided by SSL/TLS.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "ah, no, we didnâ€™t, forget it.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Shouldnt the assigned value be jQuery.fn.toggle?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "The old behavior was to only use the events toggle if the first *two* arguments were functions, since thats its signature.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "It may not matter, but its worth noting.",
                    "beginOffset": 123
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "its a bit too obfuscated for my tastes here.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "What are the savings from doing it this way?",
                    "beginOffset": 45
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This is a public method so we shouldnt casually change its signature.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "It should continue to take a single arguments parameter, and then _on_request_body should merge body_arguments and query_arguments into arguments.",
                    "beginOffset": 71
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I like the first idea, saves a few lines of code and we wont forget to add it (perhaps as another pull or commit for this one?).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            },
            {
                "text": {
                    "content": "I cant comment on the Boost.Thread stuff, but as we include or somewhere else use it (the lib is there), why not ... perhap",
                    "beginOffset": 130
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Because Im always the one who forgets to add that comma later when adding another item to an array.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "I can remove it if need be.",
                    "beginOffset": 100
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Usually we set event identifiers in setEventManager(), which ensures that they happen on injection.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "That also simplifies the getEventManager() implementation, as it only needs to call setEventManager(new EventManager()).",
                    "beginOffset": 100
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            },
            {
                "text": {
                    "content": "On Wed, May 8, 2013",
                    "beginOffset": 223
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "should be:  **if (isset() && ! empty() && ())**",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "should be: **(, , 0),**",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This is not something you can just do.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "It will break every encoded cookie out in the wild.",
                    "beginOffset": 39
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This is incorrectly placed.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "It should be under the method signature.",
                    "beginOffset": 28
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I guess it should.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "I was more concerned about the hostnames as sharing cookies between domains is going to cause problems.",
                    "beginOffset": 19
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "I forgot about path based cookies though.",
                    "beginOffset": 123
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Both Client::_storeCookies() & Client::_addCookies() will need to be updated.",
                    "beginOffset": 166
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@markstory To follow the [RFC 2109](http://www.ietf.org/rfc/rfc2109.txt) (section 4.3.1) the path should be the base path of the requested URL when not specified.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Defaults to the path of the request URL that generated the  SetCookie response, up t",
                    "beginOffset": 165
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@markstory Why do you trim the dot from the domain?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "It can cause security issue.",
                    "beginOffset": 52
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "The cakephp.org cookie domain is accessible only by the http://cakephp.org, but the .cakephp.org cookie can be accessed by http://cakephp.org and http://bakery.cakep",
                    "beginOffset": 81
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.9,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "In RFC 2109 an explicitly set domain must always start with a .",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "(section 4.2.2).",
                    "beginOffset": 64
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Only if the domain is omitted will the  leading .",
                    "beginOffset": 81
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "be missing (section 4.3.1).",
                    "beginOffset": 131
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Based on the domain matching examples, the rules seem like a cookies inclusion in a request",
                    "beginOffset": 159
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": 0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Just as curiosity, I was looking the [DateTime documentation](http://us2.php.net/manual/en/class.datetime.php) today and they have the constant for the RFC formats.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "Form the [cookie RFC](http://tools.ietf.org/html/rfc2616#section3.3.1), it could be",
                    "beginOffset": 166
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Amending response: Valid as is, see other location spam comments",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Not sure if itâ€™s worth it, but you could avoid creating a new array with each iteration by assigning the current exterior to a reusable global length1 array.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "That struct looks pretty good.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "For the basic version (i.e. git_clone) all you should need to provide is how to tell you about progress and what branch to checkout.",
                    "beginOffset": 31
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "I think we might want to add a flag saying whether we want to ignore SSL errors.",
                    "beginOffset": 164
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This function still feels like a big hack to me.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "I dont think you should create another abort method to pass the data you need.",
                    "beginOffset": 49
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Id recommend creating an exception class (similar to [ForbiddenError](https://github.com/reddit/reddit/commit/633a7104913",
                    "beginOffset": 128
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Also do not forget about code style: 1.9 hash",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Can just use the above hash map until it becomes an issue with an increasing amount of migrators I guess.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "encrypted?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Well, youre trying to mitigate BREACH here, which already requires the attacker MITM with a TCP proxy and can drive the victims browser.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "A timing attack on CSRF would have the exact same setup, but rather than using the TCP proxy to measure the length o",
                    "beginOffset": 137
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Note that I am not one to FREAK OUT at every use of String#== either [[1][1]] :P",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "But given the attack this patch is intending to mitigate, I think its warranted  [1]: https://github.com/pbhogan/scrypt/pull/15",
                    "beginOffset": 81
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Please run brew audit oinkmaster.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": ":x: This not follows your own method signature.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Expected string passed Exception instance",
                    "beginOffset": 48
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@param  string|Exception  ??",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "This is original method signature.",
                    "beginOffset": 29
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": 0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "@Maks3w Actually, setAttributeWithSanitization() will (eventually) call sanitizeUri(), so the value is safe.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": 0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "What do you think about   ruby user = model.find_by_email(email)  # If no user found and allow_username_or_email_login is true # we look for user by extracting part of his email if !user && email && ldap_conf[allow_username_or_email_login]",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "error": {
            "code": 400,
            "message": "Invalid JSON payload received. Closing quote expected in string.\n\n^",
            "status": "INVALID_ARGUMENT"
        }
    },
    {
        "documentSentiment": {
            "magnitude": 1.8,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "hmm...",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "It works for assertions.rb.",
                    "beginOffset": 7
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "But running the tests for sanitizers.rb gave me 195 failures.",
                    "beginOffset": 35
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Whats weird is, I dont get any errors a la uninitialized constant Loofah, the tests just fail.",
                    "beginOffset": 97
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "can you use Ruby 1.9 hash syntax?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This is not necessary  its a developersupplied value, not user input.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Also, the next two lines do enough to sanitize the value.",
                    "beginOffset": 70
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": 0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This is sooo much better than the ldap_prefix = ldap ?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            },
            {
                "text": {
                    "content": "(LDAP) :  line of code :)",
                    "beginOffset": 55
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I thought it would be easy to disable by setting enabled: to false.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Though I was supposed to make it default to true.",
                    "beginOffset": 68
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Should it be changed to disabled?: yaml ldap:   key: val pam:   disabled: true   key: val",
                    "beginOffset": 119
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "You can configure any provider to be icon provider by setting login_form: yaml pam:   login_form: false  Though, it the wont pass  app_id and app_secret as first parameters...",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Why do those providers require them to be arguments instead of bein",
                    "beginOffset": 176
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yeps.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "Idea is that email is required only to create new user.",
                    "beginOffset": 6
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Authentication do not require it (if user is found).",
                    "beginOffset": 62
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "To save the trouble of doing this, I just kept ldap_enable?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "and added a new shibboleth_enable?",
                    "beginOffset": 60
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "for the same purpose.",
                    "beginOffset": 95
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Nevertheless, I agree with this approach as it is cleaner.",
                    "beginOffset": 117
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.8,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "In shibboleth configuration, there is no app_id nor  app_secret, and  login_form is  false.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "This way, icon is false and also options[login_form] is false.",
                    "beginOffset": 92
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "So the options hash will be passed to configure",
                    "beginOffset": 155
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Why do you do this either way, options[login_form] is true or false?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Shouldnt this depend on icon, instead?",
                    "beginOffset": 69
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Something like: ruby if icon   Gitlab.config.omniauth.form_providers \u003c\u003c provider end",
                    "beginOffset": 108
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yes.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "eg.",
                    "beginOffset": 5
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "above pam[gecos_map] is passed to provider here.",
                    "beginOffset": 9
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "icon is true only if both app_id and app_secret  are given.",
                    "beginOffset": 58
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "And any case, all options are passed as a hash to provider (in both cases).",
                    "beginOffset": 118
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Also this is for the purpose that you can have shibboleth as an icon (like github) or as text button (like you have it in you branch).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "To keep shibboleth as login button (text instead of icon) write in gitlab.yml: yaml shibboleth:   login_form:",
                    "beginOffset": 135
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "As I noted below.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "this should be in above: yaml login_form:   fields: false",
                    "beginOffset": 18
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Wouldnt be better to just clear the hashes in these methods instead?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Sorry, we do  its the user supplied hash.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Got confused there for a minute :smile:",
                    "beginOffset": 42
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 2,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "() cannot return null.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "So you can safe a condition check.",
                    "beginOffset": 23
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "Btw unrelated, kernelgetStartTime() returns INF, which is probably also problematic as INF not always supported and it violates the phpdoc which says, an integer is",
                    "beginOffset": 58
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "As long as were improving code quality, could stop mutating the options hash here.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Why is dirs a hash?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Shouldnt it be a list?",
                    "beginOffset": 21
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.6,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "re select specific coins: If you read the original motivation for this patch it was to prevent linkages of addresses/privatekeys.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "Selecting individual coins doesnt matter for that.",
                    "beginOffset": 131
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "re the RPC command arguments: Im not sold that its worth doing what",
                    "beginOffset": 183
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Please add options to configure password and database",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "While i aggree this generate less code, but readibility will be completely sacrificed, dont you think?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Ah, i forget, you the one who put a single ternary statement which exced more than monitor space into a single line :P",
                    "beginOffset": 103
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "@timw4mail @philsturgeon any o",
                    "beginOffset": 223
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "AFAIU, earlier versions of PHP has security issues and as we have other password encoders, why would we want to support PHP versions with known issues?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "The issue is only with passwords that got the high bit set on some chars for some specific combination of chars (not even valid utf8 chars).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "I think many could live with that minor risk.",
                    "beginOffset": 141
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "I myself would want to use this code also on pre 5.3.7 platforms",
                    "beginOffset": 188
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Ok, i would then prefer that the whole start stop time calc is done there.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Dont have half in decode and half in get overlay.",
                    "beginOffset": 75
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "before execution even gets here  i.e. while jekyll is running.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Basically the same problem as described [here](http://stackoverflow.com/questions/9503579/testingacommandlineapplicationwithcucumberarubatimecophowtoinjectthe), but neither s",
                    "beginOffset": 64
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "you should probably initialize the path of the list with m_vecItemsGetPath() here, since youre assigning that at the end to items.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "See Pull request 1176 (https://github.com/xbmc/xbmc/pull/1176) where tvshows/seasons watchedfiltering is using the li",
                    "beginOffset": 131
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I think it might be better to add an optional argument to cookiejar_from_dict rather than have a new function that duplicates almost all the logic.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Something like:  python def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):",
                    "beginOffset": 148
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Perhaps this method should not directly tested if you need to use reflection hacks to test it.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Could simple unset them in CommandTask::getShellList from listing.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "TBH that is hacky at best.",
                    "beginOffset": 67
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Using reflection to check for a attribute marking it as hidden would slow it down considerably but could be a clean way to do it.",
                    "beginOffset": 94
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This will not work if you define several encoders using bcrypt (for different classes) as you are forcing the id.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "You should return the data needed to build the encoder instead, like done for other encoders",
                    "beginOffset": 115
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "How do you return the reference to the service security.secure_random then, that the bcrypt encoder needs in its constructor?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "SymfonyComponentSecurityCoreEncoderEncoderFactorycreateEncoder() only allows a plain array with no references to",
                    "beginOffset": 126
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Well, you may need to refactor some stuff.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "But the way you do it currently is broken as soon as you have several classes using bcrypt (they would all use the config of the last one, thus not respecting the cost)",
                    "beginOffset": 43
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I guess @elnur could take a look at how it is done in the method SymfonyBundleSecurityBundleDependencyInjectionSecurityFactorycreateAuthProvider()  There a new definition is created in the DI container for each instance.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "I guess that the same thi",
                    "beginOffset": 221
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Another (and more clean solution) is to rewrite the class SymfonyComponentSecurityCoreEncoderEncoderFactory so that it does not try to create the Encoder objects on its own (using ()), but instead makes use of the DI to cr",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "well, at least using a more specific name to make clashes less likely (SYMFONY_BCRYPT_PREFIX for instance), and wrapping it in a defined check",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": -0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "This is original code https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/Loader/XmlFileLoader.php#L490",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": 0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Im wondering what to do for this.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "I cant find a way to determine if a sub pattern matched or not.",
                    "beginOffset": 34
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Assigning the parameters value here would break default values (non matched params would be assigned an empty string).",
                    "beginOffset": 98
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Any idea ?",
                    "beginOffset": 217
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "include  around django.contrib.auth.hashers.PBKDF2PasswordHasher",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Wouldnt it be better to create a compiler pass class for that logic directly in the DependencyInjection component?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "and you would then want to move that logic into SymfonyComponentDependencyInjectionCompilerMergeExtensionConfigurationPass?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "This is also not a change in the phpdoc and I would argue that we want a PropertyPath here (ViolationPath also implements PropertyPathInterface).",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Well, we are not responsible if something stupid is done manually by the developer.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "So a ViolationPath would just be as wrong as an array or a subclass of PropertyPath that behaves strange.",
                    "beginOffset": 84
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "We can only make sure its flexible enough and  thats what the i",
                    "beginOffset": 190
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I dont see the problem  it is restricted to the admin role due to the as: :admin on the next line.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "This change whitelists the attribute for code that is executed with the admin role only.",
                    "beginOffset": 99
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Where could this be abused?",
                    "beginOffset": 189
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Using it still requires an expl",
                    "beginOffset": 217
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "in case of thousand projects its not a best idea.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Maybe do 2 queries?",
                    "beginOffset": 51
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "current_user.authorized_projects.search && Project.public.search",
                    "beginOffset": 71
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I chose char* as PEM_read_bio_PrivateKey doesnt accept a const ([here](https://github.com/joyent/node/blob/master/deps/openssl/openssl/crypto/pem/pem_pkey.c#L75))  I suppose another option would be to cast with const_cast, my assumption is that thi",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0,
            "score": 0
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I was following the style here: https://github.com/joyent/node/blob/master/src/node_crypto.cc#L372  The preferred style would be:  c++ bool r = signSignFinal(&md_value,                          &md_len,                          buf,",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0,
                "score": 0
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": 0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Oh for Ruby 1.9 hashes!",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            },
            {
                "text": {
                    "content": ":crying_cat_face:",
                    "beginOffset": 24
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Also, data[cipher_offset + 1] looks like it could be an outofbounds read.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Typo in the name (you wrote autheTNication).",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Moreover, as you added the use statement, you can simply use AuthenticationService as well in each docblock.",
                    "beginOffset": 45
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Unsigned int or size_t?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Youre comparing it to unsigned values in node_crypto_bio.cc and I wager its always going to be  0 anyway.",
                    "beginOffset": 24
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "assert(read_head_write_pos  read_head_read_pos)?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Theyre both unsigned so if a bug sneaks in where read_pos  write_pos, read_pos  write_pos wraps around.",
                    "beginOffset": 49
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Youre still repeating yourself here: the expression new ParHashMap[A, B](hashTableContents) is copied verbatim.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Why?",
                    "beginOffset": 112
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Method par already does that.",
                    "beginOffset": 117
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "So that I dont forget.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "We also need to change versionFormat!",
                    "beginOffset": 23
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "... to clarify: the only instance where holdSurface is called in DXVA.cpp is by CDecoder.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Now for software decoded we dont pass through this channel so in that case we will are using unheld surfaces potentially being released while you still need the",
                    "beginOffset": 90
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "HoldSurface() is needed for hardware decoder only because the surfaces are shared and the decoder should not release them until the processor is destroyed.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "For software decoding the surfaces are exclusively controlled by the processor, so they dont have",
                    "beginOffset": 156
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "HoldSurface is a trick to handle the termination of the decoder.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "It shouldnt be necessary when the processor is the only object dealing with the surfaces.",
                    "beginOffset": 65
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "To check for yourself, you can switch the DX runtime to debug mode (with the DirectX Control panel)",
                    "beginOffset": 155
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "This is a signature change, and should be removed.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I gave my opinion how I would solve your issue.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Either you trust the passed parameters (because you defined them yourself or you validated them when they were specified by a user), or you dont trust them at generation time (which means you probably need",
                    "beginOffset": 48
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "one way to whack the mole more reliably and get more encapsulation to boot: leave this intact and provide failing implementations of all Symbol methods in the StubSymbol subclasses  Im figuring out whether this is doable.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Theres also risk with missin",
                    "beginOffset": 222
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "We need only one copy of it  it perfectly fits to be static.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "Other solutions looks like a workaround/hacks: make variable nonstatic and create static instance of class to have only one unique nonstatic member variable.",
                    "beginOffset": 62
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "We dont need constructors, d",
                    "beginOffset": 221
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "!m_strPassword.empty()",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.4,
                "score": -0.4
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This routine is only ever called with a std::string, so I suggest changing the signature.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "This then allows you to drop the strcmp() which is gonna warn on some compilers.",
                    "beginOffset": 91
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I dont know what happen here but this Component is using the new exceptions.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "This should be, at least, CryptExceptionExceptionInterface",
                    "beginOffset": 77
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.4,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yes, thats true.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "I fixed also in the other subclasses of ZendCrypt.",
                    "beginOffset": 17
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "All of the examples say that options is a hash, will it ever not be?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@akrabat Oh, I see you point, I for some reason though the dsn was all encompassing including stuff like username and password.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Ill fix these pronto.",
                    "beginOffset": 129
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This wouldnt really break any security configurations I dont think.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "The hinclude tags just wouldnt work until you changed the access control:      { path: ^/_internal, roles: IS_AUTHENTICATED_ANONYMOUSLY, ip: 127.0.0.1 }  to:      { path: ^/_internal/",
                    "beginOffset": 69
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": -0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Why not a simple check for null?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "As the provider is injected in the constructor the object will be type hinted?",
                    "beginOffset": 33
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Is this to guard against people doing crazy things while extending the class?",
                    "beginOffset": 113
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@jstout24 @Tobion this feature is a small hack, to provide support for rare use cases, when youre forced to have that form (ie.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "PayPal integration etc.) this should not be used as everyday practice?",
                    "beginOffset": 128
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "@jstout24 what is yours point to have multiple forms",
                    "beginOffset": 200
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "got a failure removing it:   1) Failure: test_0004_nested array with strings that should be hashes(NestedParametersTest) [/Users/guille/code/rails/actionpack/test/controller/parameters/nested_parameters_test.rb:68]: Expected nil (NilClass) to respond t",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "HashWithIndifferentAccess is overriding [#dup](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/hash_with_indifferent_access.rb#L182186) and it doesnt call to super or initialize_dup never, so if we override init",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": -0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Okay, I see you use fully qualified names here.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "It would be more standard to encode them as com in the same way as the compiler does in expandName rather than inventing a new means to do this.",
                    "beginOffset": 48
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "In any case, Im still against putting",
                    "beginOffset": 194
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 2.2,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Oh wow, didnt realize its so complicated.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Then how about renaming ExtractorType, so that it doesnt trick people into it being an ultimate authority?",
                    "beginOffset": 42
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "Something like HasUnapplyMember.",
                    "beginOffset": 149
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Also a comment here most definitely will help.",
                    "beginOffset": 182
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.5,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "FFS...",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "GitHub lost my comment :(",
                    "beginOffset": 7
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Ok lets write it again but short:  Its fix/hack for rendering TimeType and [with_seconds] = false, to explain it check those tests: [old](https://github.com/symfony/symfony/blob/master/tests/Symfony/Test",
                    "beginOffset": 33
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Making this an optional hash parameter would be nice.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Any benefits for using a hash?",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "More options in future?",
                    "beginOffset": 31
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I assume you researched this, but Ill ask anyway, is there no more direct way to get a URL encoder?",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.9,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Wooow, nope.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Lets make AmigaOS stick to the default crossplatform SHA1 implementation.",
                    "beginOffset": 13
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "This hack is way too ugly.",
                    "beginOffset": 87
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": -0.9
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.9,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I dunno, its kind of a huge hack, I wouldnt worry about people relying on it.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "Especially since we want to completely kill it.",
                    "beginOffset": 78
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "The worst that happens is some minor extra stderr output, right?",
                    "beginOffset": 126
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "Until the day we kill it completely.",
                    "beginOffset": 191
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "These seems a bit silly  you dont need to hash the uniqid, its already supposed to be unique!",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": -0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": -0.8
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Sadly not,  the assignment works, but then after the code has executed the assigned value is lost again :(",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.8,
                "score": -0.8
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Ugly hack is ugly.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "I will fix it.",
                    "beginOffset": 19
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.7,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yeah!",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "I didnt pour half my life into stupid old pattern matcher so you kids today could forget about isIntRange!",
                    "beginOffset": 6
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Sorry about the TODO.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "I feel lost sometimes, because I worry about too much ticket noise but at the same time signature changes do break binary compatibility, so I dont feel ok just unilaterally making the change myself.",
                    "beginOffset": 22
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "AH..",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "I hate to be annoying, but why not just call it hash if were going to change it.",
                    "beginOffset": 5
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "Either one is fine really.",
                    "beginOffset": 88
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 2.9,
            "score": -0.7
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Thread safety of the compiler is a cruel joke.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": -0.9
                }
            },
            {
                "text": {
                    "content": "No, its not, like the rest of it.",
                    "beginOffset": 47
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "I dont have any understanding of where or how threadsafety is supposed to enter into my considerations.",
                    "beginOffset": 81
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            },
            {
                "text": {
                    "content": "But I KNOW I never signed up to start pretending the compiler is th",
                    "beginOffset": 185
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 2.2,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Alright, thanks.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            },
            {
                "text": {
                    "content": "I dont have access to my dev environment at the moment, so Ill have to fix what you commented on tomorrow or the day after.",
                    "beginOffset": 17
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Thanks again, Trustin :)",
                    "beginOffset": 142
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 2.1,
            "score": 0.7
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Its more elegant to reinterpret_cast the return value in crtExportChallenge.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            },
            {
                "text": {
                    "content": "That gives ExportChallenge and ExportPublicKey the same return type which is nice from an API perspective.",
                    "beginOffset": 77
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            },
            {
                "text": {
                    "content": "As a general observation, unchecked casts at call sites are a great",
                    "beginOffset": 184
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Dont forget: V8 is smarter than us all :P",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.3,
                "score": -0.3
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": 0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Because I trust @Seldaek who spent time doing benchmarks on realworld apps.",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": 0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Can you just change this line to:      if ( ! () OR !",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "())  ... it would be a bit more readable.",
                    "beginOffset": 54
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Otherwise its great  well merge it in.",
                    "beginOffset": 96
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Well the current code sniffs complain about it.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            },
            {
                "text": {
                    "content": "We could always change the rules :smile:",
                    "beginOffset": 48
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": 0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Dont forget to remove that :).",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": 0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Better not give the code sniffer reasons to complain :smile:",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.6,
                "score": -0.6
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": 0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Indeed..",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": 0.3
                }
            },
            {
                "text": {
                    "content": "I never saw anyone use them in a bundle, so I tend to forget they exist :)",
                    "beginOffset": 9
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            },
            {
                "text": {
                    "content": "Updated the code.",
                    "beginOffset": 84
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": ":)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            },
            {
                "text": {
                    "content": "It is....",
                    "beginOffset": 4
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "I couldnt think of another way to detect if the  was already encoded or not.",
                    "beginOffset": 15
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Doing this will make it so the  isnt encoded twice.",
                    "beginOffset": 93
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "yes, just checked the documentation, im changing to array_key_exists :)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": 0.5
                }
            },
            {
                "text": {
                    "content": "the code will still be faster.",
                    "beginOffset": 73
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "as well only do hash lookup instead of plain walk",
                    "beginOffset": 104
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Thanks,  but no, it isnt, they were test keys removed before publishing :)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "but now that I think about it,, to compute the Authorization it reads the access key and the secret Key, we have to add it to the test.",
                    "beginOffset": 77
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@macksmind Thats right.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Also, @steveklabnik , its because during the context of the test SSL is defined as an acronym, and the test is testing the correct inflection on nonacronyms. :)",
                    "beginOffset": 24
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": 0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Please, use 1.9 hash syntax.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "Thanks :)",
                    "beginOffset": 29
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Lets go with ensure_reset_password_token!",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "here too.",
                    "beginOffset": 42
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "You can also change the line 47 of this file to call this new method. :)",
                    "beginOffset": 52
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": 0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "@DaQuirm Never allows a change to SUBJECT reads a lot better than Never allows to change SUBJECT in my opinion.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": 0.8
                }
            },
            {
                "text": {
                    "content": "While English is my first language, Im not an authority over the language. :)",
                    "beginOffset": 114
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Use default parameter if not set by params hash.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "If you know less ugly way to do this, please tell me how :)",
                    "beginOffset": 49
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.1,
            "score": 0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Hm, wed be creating extra arrays anyway to generate a final hash, will end up being the same as the current hash.merge I think.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": 0.4
                }
            },
            {
                "text": {
                    "content": "I can rollback or use your change if thats not a problem :)",
                    "beginOffset": 128
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.2,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Hahah too clever.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "I didnt like the clutter of the other one, and neither did Code Climate :)",
                    "beginOffset": 18
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "I was thinking having a method for it was better than  ruby # Convert this post into a Hash for use in Liquid templates.",
                    "beginOffset": 95
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            },
            {
                "text": {
                    "content": "# # Returns the representa",
                    "beginOffset": 216
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.1,
            "score": 0.1
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "good point: I removed the hackery",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.1,
                "score": 0.1
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": 0.9
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I have no idea either, I just trust the spray guys",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.9,
                "score": 0.9
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": 0.7
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Added BjÃ¶rn to trust list :)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.7,
                "score": 0.7
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": 0.9
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "It helps debugging, and no security is violated as there is none :)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.9,
                "score": 0.9
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I blame the computer :)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "no, it should of course go together with the MurmurHash class, I think I move it to a separate file, to avoid license ambiguities, also makes sense since we use MurmurHash from other place also.",
                    "beginOffset": 24
                },
                "sentiment": {
                    "magnitude": 0.4,
                    "score": -0.4
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": 0.5
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Also if there was support for unsigned integers in Java :)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.5,
                "score": 0.5
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 1.4,
            "score": 0.7
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Sure can do.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": 0.5
                }
            },
            {
                "text": {
                    "content": "Privacy is a right!",
                    "beginOffset": 13
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "The as_json requirement is a little looser than you are thinking :)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "Its meant to produce a JSON representation of the object, which includes Ruby objects that have a clear meaning to the JSON encoder, like symbols and times.",
                    "beginOffset": 69
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Thats a natural way for a",
                    "beginOffset": 226
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": 0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.8,
            "score": 0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Forget about it :)",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "all fine.",
                    "beginOffset": 19
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": 0.6
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 2.6,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Orhhh...",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": 0.1
                }
            },
            {
                "text": {
                    "content": "No..",
                    "beginOffset": 9
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "It blows up whole stack. :(",
                    "beginOffset": 14
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": -0.9
                }
            },
            {
                "text": {
                    "content": "To modify signature of write_normal() and write_deflate() we need to modify struct git_filebuf write.",
                    "beginOffset": 43
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Than git_filebuf_write().",
                    "beginOffset": 145
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Than config_file.c and odb_loose.c...",
                    "beginOffset": 171
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "We need better solution.",
                    "beginOffset": 210
                },
                "sentiment": {
                    "magnitude": 0.7,
                    "score": -0.7
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.5,
            "score": -0.1
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Aliasing types like this is a cardinal sin in that it makes things more obfuscated rather than less.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "(Whats this ExtType type?",
                    "beginOffset": 102
                },
                "sentiment": {
                    "magnitude": 0.3,
                    "score": -0.3
                }
            },
            {
                "text": {
                    "content": "What values can it have?",
                    "beginOffset": 129
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            },
            {
                "text": {
                    "content": "Oh, its just v8::ExternalArrayType  why dont they just say so!)",
                    "beginOffset": 155
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.6,
            "score": -0.5
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This seems a bit awkward (the if ... continue) part, I dont expect a function named port_* to return anything, and then it does return a dict which gets discarded...",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "its just weird.",
                    "beginOffset": 166
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "I think it might be better to just port all the cookie settings en",
                    "beginOffset": 182
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Ah I forgot about that and didnt test properly, sorry.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            },
            {
                "text": {
                    "content": "The buildout directory is now included in the install whitelist.",
                    "beginOffset": 55
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Ive squashed the commits.",
                    "beginOffset": 120
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": -0.2
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1.3,
            "score": -0.6
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "I would like this to not be in the API at all.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            },
            {
                "text": {
                    "content": "It is very difficult to get this right such that you dont introduce SQL injection attacks like the current implementation allows.",
                    "beginOffset": 47
                },
                "sentiment": {
                    "magnitude": 0.8,
                    "score": -0.8
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.7,
            "score": -0.3
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This impl is weird.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.6,
                    "score": -0.6
                }
            },
            {
                "text": {
                    "content": "Uses system identityHashCode for hashCode AND equals?",
                    "beginOffset": 20
                },
                "sentiment": {
                    "magnitude": 0.1,
                    "score": -0.1
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.6,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "This code again!",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            },
            {
                "text": {
                    "content": "Will this hack never tire of creating new issues.",
                    "beginOffset": 17
                },
                "sentiment": {
                    "magnitude": 0.5,
                    "score": -0.5
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.3,
            "score": 0
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Yeah, Im capable of working around it.",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.2,
                    "score": 0.2
                }
            },
            {
                "text": {
                    "content": "A setting which disables swing would be thrilling, way ahead of what Im currently doing, git merge origin/java7 with periodic annoying failures on swing if I forget.",
                    "beginOffset": 40
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 1,
            "score": 0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "Looks fine to me!",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "On Jul 8, 2013, at 10:12 PM, Joshua Peek \u003cnotifications@github.com wrote:   In activesupport/lib/active_support/message_verifier.rb:            else            raise InvalidSignature          end        end",
                    "beginOffset": 19
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    },
    {
        "documentSentiment": {
            "magnitude": 0.2,
            "score": -0.2
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "Formula updated to address this (would be nice if brew audit warned about this...)",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.2,
                "score": -0.2
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": 0.9
        },
        "language": "en",
        "sentences": [{
            "text": {
                "content": "I trust you",
                "beginOffset": 0
            },
            "sentiment": {
                "magnitude": 0.9,
                "score": 0.9
            }
        }]
    },
    {
        "documentSentiment": {
            "magnitude": 0.9,
            "score": 0.4
        },
        "language": "en",
        "sentences": [{
                "text": {
                    "content": "got it~ thanks!",
                    "beginOffset": 0
                },
                "sentiment": {
                    "magnitude": 0.9,
                    "score": 0.9
                }
            },
            {
                "text": {
                    "content": "On Sat, Mar 31, 2012 at 2:07 AM, Jack Nagel \u003creply@reply.github.com wrote:  +class Mpfi \u003c Formula  + Â homepage http://perso.enslyon.fr/nathalie.revol/software.html  + url https://gforge.inria.fr/frs/download.php/30130/m",
                    "beginOffset": 17
                },
                "sentiment": {
                    "magnitude": 0,
                    "score": 0
                }
            }
        ]
    }
]